(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{214:function(t,v,_){"use strict";_.r(v);var e=_(28),l=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"前端知识体系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前端知识体系"}},[t._v("#")]),t._v(" 前端知识体系")]),t._v(" "),_("h2",{attrs:{id:"webpack"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[t._v("#")]),t._v(" webpack")]),t._v(" "),_("p",[t._v("打包原理")]),t._v(" "),_("ul",[_("li",[t._v("从入口出发，对文件进行递归分析，对各个文件中的依赖生成依赖图谱。")]),t._v(" "),_("li",[t._v("对每个模块打包成一个立即执行函数。")]),t._v(" "),_("li",[t._v("根据出口配置，生成输出文件。")])]),t._v(" "),_("p",[t._v("（插入说，其实用 loader 处理文件转化，plugin 注入钩子，在特定时机处理代码文件）")]),t._v(" "),_("p",[t._v("打包流程")]),t._v(" "),_("ol",[_("li",[t._v("初始化参数: 对配置文件和shell中的配置合成；")]),t._v(" "),_("li",[t._v("开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；")]),t._v(" "),_("li",[t._v("确定入口：根据配置中的 entry 找出所有的入口文件；")]),t._v(" "),_("li",[t._v("编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")]),t._v(" "),_("li",[t._v("完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；")]),t._v(" "),_("li",[t._v("输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；")]),t._v(" "),_("li",[t._v("输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。")])])])}),[],!1,null,null,null);v.default=l.exports}}]);