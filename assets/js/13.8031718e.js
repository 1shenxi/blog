(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{212:function(t,n,e){"use strict";e.r(n);var a=e(28),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"js-规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-规范"}},[t._v("#")]),t._v(" JS 规范")]),t._v(" "),e("p",[t._v("为了让阅读者更好的理解和识别，对于要进行规范的范式使用标识符进行一定的划分。")]),t._v(" "),e("p",[e("code",[t._v("e")]),t._v(" ：表示 "),e("code",[t._v("eslint")]),t._v("，我们将会去 "),e("code",[t._v("eslint")]),t._v(" 中去实现。")]),t._v(" "),e("p",[e("code",[t._v("p")]),t._v(" ：表示 "),e("code",[t._v("person")]),t._v("，需要开发者了解的。(ps: 当然，所有的规则开发者都了解更佳。)")]),t._v(" "),e("p",[e("code",[t._v("u")]),t._v(" ：表示 "),e("code",[t._v("unknown")]),t._v("，表示当前规则时候有现有 "),e("code",[t._v("eslint")]),t._v(" 规则。")]),t._v(" "),e("p",[e("code",[t._v("t")]),t._v(" ：表示 "),e("code",[t._v("tool")]),t._v(", 最好能通过三方库的方式来引解决(三方库可以是内部自己的库)。")]),t._v(" "),e("h2",{attrs:{id:"声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#声明"}},[t._v("#")]),t._v(" 声明")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("e")]),t._v(" 1.1 所有的赋值都用"),e("code",[t._v("const")]),t._v("，避免使用"),e("code",[t._v("var")]),t._v("。eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/prefer-const.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("prefer-const")]),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"https://eslint.org/docs/rules/no-const-assign.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-const-assign")]),e("OutboundLink")],1)])]),t._v(" "),e("blockquote",[e("p",[t._v("为什么？这确保您不会再被修改的声明被重新赋值，这可能会导致bug和难以理解的代码。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("e")]),t._v(" 2.2 如果你一定要对参数重新赋值，那就用"),e("code",[t._v("let")]),t._v("，而不是"),e("code",[t._v("var")]),t._v(".  eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/no-var.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-var")]),e("OutboundLink")],1)])]),t._v(" "),e("blockquote",[e("p",[t._v("为什么？ "),e("code",[t._v("let")]),t._v(" 是一个块级作用于而不是想 "),e("code",[t._v("var")]),t._v(" 是一个函数作用域。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good, use the let.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("p")]),t._v(" 2.3 注意，"),e("code",[t._v("let")]),t._v(" 和 "),e("code",[t._v("const")]),t._v(" 都是块级作用域。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// const 和 let 都只存在于它定义的那个块级作用域")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReferenceError")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReferenceError")]),t._v("\n")])])]),e("h2",{attrs:{id:"objects"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#objects"}},[t._v("#")]),t._v(" Objects")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("e")]),t._v(" 2.1 使用字面值创建对象. eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-new-object.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-new-object")]),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("code",[t._v("p")]),t._v(" 2.2 当创建一个带有动态属性名的对象时，用计算后属性名")])])]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 这可以使你将定义的所有属性放在对象的一个地方.")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("k")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("a key named ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("k"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'San Francisco'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'enabled'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good getKey('enabled')是动态属性名")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'San Francisco'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'enabled'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("e")]),t._v(" 2.3 用对象方法简写. eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/object-shorthand.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("object-shorthand")]),e("OutboundLink")],1)])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" atom "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  value"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("addValue")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" atom"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" atom "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  value"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象的方法")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("addValue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" atom"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("e")]),t._v(" 3.4 用属性值缩写. eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/object-shorthand.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("object-shorthand")]),e("OutboundLink")],1)])]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 这样写的更少且更可读")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" lukeSkywalker "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Luke Skywalker'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  lukeSkywalker"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" lukeSkywalker"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  lukeSkywalker"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("u")]),t._v(" 3.5 将你的所有缩写放在对象声明的开始.")])]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 这样也是为了更方便的知道有哪些属性用了缩写.")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" anakinSkywalker "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Anakin Skywalker'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" lukeSkywalker "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Luke Skywalker'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  episodeOne"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  twoJediWalkIntoACantina"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  lukeSkywalker"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  episodeThree"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  mayTheFourth"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  anakinSkywalker"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  lukeSkywalker"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  anakinSkywalker"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  episodeOne"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  twoJediWalkIntoACantina"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  episodeThree"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  mayTheFourth"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("e")]),t._v(" 3.6 只对那些无效的标示使用引号 "),e("code",[t._v("''")]),t._v(". eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/quote-props.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("quote-props")]),e("OutboundLink")],1)])]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 通常我们认为这种方式主观上易读。他优化了代码高亮，并且也更容易被许多JS引擎压缩。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bad "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data-blah'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" good "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  foo"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  bar"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data-blah'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("t")]),t._v(" 3.7 不要直接调用"),e("code",[t._v("Object.prototype")]),t._v("上的方法，如"),e("code",[t._v("hasOwnProperty")]),t._v(", "),e("code",[t._v("propertyIsEnumerable")]),t._v(", "),e("code",[t._v("isPrototypeOf")]),t._v("。")])]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 在一些有问题的对象上， 这些方法可能会被屏蔽掉 - 如："),e("code",[t._v("{ hasOwnProperty: false }")]),t._v(" - 或这是一个空对象"),e("code",[t._v("Object.create(null)")])])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// best")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" has "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hasOwnProperty"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在模块作用内做一次缓存")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* or */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" has "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'has'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://www.npmjs.com/package/has")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("p")]),t._v(" 3.8 对象浅拷贝时，更推荐使用扩展运算符[就是 "),e("code",[t._v("···")]),t._v("运算符]，而不是"),e("code",[t._v("Object.assign")]),t._v("。获取对象指定的几个属性时，用对象的rest解构运算符[也是"),e("code",[t._v("…")]),t._v("运算符]更好。\n"),e("ul",[e("li",[t._v("这一段不太好翻译出来， 大家看下面的例子就懂了。^.^")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("注意：建议在拷贝时用，但如是深拷贝，还是使用三方库更佳。此外，如果是赋值操作，使用第一个没问题。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// very bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" original "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" copy "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("original"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" c"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this mutates `original` ಠ_ಠ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" copy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// so does this")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" original "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" copy "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" original"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" c"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// copy => { a: 1, b: 2, c: 3 }")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good es6扩展运算符 ...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" original "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浅拷贝")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" copy "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("original"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// copy => { a: 1, b: 2, c: 3 }")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rest 赋值运算符")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("noA "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" copy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// noA => { b: 2, c: 3 }")]),t._v("\n")])])]),e("h2",{attrs:{id:"arrays"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arrays"}},[t._v("#")]),t._v(" Arrays")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("e")]),t._v(" 4.1 用字面量赋值。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-array-constructor.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-array-constructor")]),e("OutboundLink")],1)])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" items "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" items "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("p")]),t._v("  4.2 用"),e("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array#push"),e("OutboundLink")],1),t._v(" 代替直接向数组中添加一个值。")])]),t._v(" "),e("p",[t._v("解释：更具语义化。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" someStack "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\nsomeStack"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("someStack"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abracadabra'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\nsomeStack"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abracadabra'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("p")]),t._v("  4.3  用扩展运算符做数组浅拷贝，类似上面的对象浅拷贝")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" len "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" items"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" itemsCopy "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\titemsCopy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" items"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" itemsCopy "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("items"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("p")]),t._v("  4.4 用 "),e("code",[t._v("...")]),t._v(" 运算符而不是"),e("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Array.from")]),e("OutboundLink")],1),t._v("来将一个可迭代的对象转换成数组。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelectorAll")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.foo'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nodes "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// best")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nodes "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("p")]),t._v("  4.5 用 "),e("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Array.from")]),e("OutboundLink")],1),t._v(" 去将一个类数组对象转成一个数组。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arrLike "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'baz'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrLike"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrLike"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("p")]),t._v("  4.6 用 "),e("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Array.from")]),e("OutboundLink")],1),t._v(" 而不是 "),e("code",[t._v("...")]),t._v(" 运算符去做map遍历。 因为这样可以避免创建一个临时数组。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" baz "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" baz "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("e")]),t._v(" 4.7 在数组方法的回调函数中使用 return 语句。 如果函数体由一条返回一个表达式的语句组成， 并且这个表达式没有副作用， 这个时候可以忽略return，详见 "),e("a",{attrs:{href:"https://github.com/lin-123/javascript#arrows--implicit-return",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.2"),e("OutboundLink")],1),t._v(". eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/array-callback-return",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("array-callback-return")]),e("OutboundLink")],1)])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" y "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good 函数只有一个语句")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad - 没有返回值， 因为在第一次迭代后acc 就变成undefined了")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("acc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" flatten "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" acc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  acc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" flatten"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("acc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" flatten "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" acc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  acc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" flatten"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" flatten"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\ninbox"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("msg")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" subject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" author "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subject "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mockingbird'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" author "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Harper Lee'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\ninbox"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("msg")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" subject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" author "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subject "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mockingbird'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" author "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Harper Lee'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("u")]),t._v("  4.8 如果一个数组有很多行，在数组的 "),e("code",[t._v("[")]),t._v(" 后和 "),e("code",[t._v("]")]),t._v(" 前断行。 请看下面示例")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" objectInArray "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" numberInArray "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" objectInArray "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" numberInArray "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"destructuring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#destructuring"}},[t._v("#")]),t._v(" Destructuring")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("e")]),t._v(" 5.1 用对象的解构赋值来获取和使用对象某个或多个属性值。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/prefer-destructuring",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("prefer-destructuring")]),e("OutboundLink")],1)])]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 解构保存了这些属性的临时值/引用")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFullName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" firstName "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" lastName "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("firstName"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("lastName"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFullName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" firstName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lastName "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("firstName"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("lastName"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// best")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFullName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" firstName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lastName "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("firstName"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("lastName"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("p")]),t._v(" 5.2 用数组解构.")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" first "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" second "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("first"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" second"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("p")]),t._v(" 5.3 多个返回值用对象的解构，而不是数据解构。")])]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 你可以在后期添加新的属性或者变换变量的顺序而不会打破原有的调用")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("processInput")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("input")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后就是见证奇迹的时刻")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("left"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" top"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bottom"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用者需要想一想返回值的顺序")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("left"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" top"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("processInput")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("processInput")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("input")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// oops， 奇迹又发生了")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" left"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" top"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bottom "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用者只需要选择他想用的值就好了")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" left"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" top "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("processInput")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"strings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#strings"}},[t._v("#")]),t._v(" Strings")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("e")]),t._v(" 6.1 对string用单引号 "),e("code",[t._v("''")]),t._v(" 。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/quotes.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("quotes")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Capt. Janeway"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad - 样例应该包含插入文字或换行")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("Capt. Janeway")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Capt. Janeway'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("u")]),t._v(" 6.2 超过100个字符的字符串不应该用string串联成多行。")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 被折断的字符串工作起来是糟糕的而且使得代码更不易被搜索。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" errorMessage "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is a super long error that was thrown because \\\nof Batman. When you stop to think about how Batman had anything to do \\\nwith this, you would get nowhere \\\nfast.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" errorMessage "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is a super long error that was thrown because '")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'of Batman. When you stop to think about how Batman had anything to do '")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'with this, you would get nowhere fast.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" errorMessage "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("e")]),t._v(" 6.3 用字符串模板而不是字符串拼接来组织可编程字符串。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/prefer-template.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("prefer-template")]),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://eslint.org/docs/rules/template-curly-spacing",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("template-curly-spacing")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 模板字符串更具可读性、语法简洁、字符串插入参数。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'How are you, '")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'?'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'How are you, '")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'?'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("How are you, ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("?")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("How are you, ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("?")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("e")]),t._v(" 6.4 永远不要在字符串中用"),e("code",[t._v("eval()")]),t._v("，他就是潘多拉盒子。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/no-eval",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-eval")]),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("code",[t._v("e")]),t._v(" 6.5 不要使用不必要的转义字符。eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-useless-escape",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-useless-escape")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 反斜线可读性差，所以他们只在必须使用时才出现哦")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\'this\\' \\i\\s \\\"quoted\\\"'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\'this\\' is \"quoted\"'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//best")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("my name is '")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"functions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[t._v("#")]),t._v(" Functions")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#functions--declarations",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.1"),e("OutboundLink")],1),t._v(" 用命名函数表达式而不是函数声明。eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/func-style",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("func-style")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("函数表达式： const func = function () {}")])]),t._v(" "),e("blockquote",[e("p",[t._v("函数声明： function func() {}")])]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 函数声明时作用域被提前了，这意味着在一个文件里函数很容易（太容易了）在其定义之前被引用。这样伤害了代码可读性和可维护性。如果你发现一个函数又大又复杂，这个函数妨碍这个文件其他部分的理解性，这可能就是时候把这个函数单独抽成一个模块了。别忘了给表达式显示的命名，不用管这个名字是不是由一个确定的变量推断出来的，这消除了由匿名函数在错误调用栈产生的所有假设，这在现代浏览器和类似babel编译器中很常见 ("),e("a",{attrs:{href:"https://github.com/airbnb/javascript/issues/794",target:"_blank",rel:"noopener noreferrer"}},[t._v("Discussion"),e("OutboundLink")],1),t._v(")")])]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 这一段还不理解这种错误发生的场景，所以只能直译过来了， 另附"),e("a",{attrs:{href:"https://github.com/airbnb/javascript#functions--declarations",target:"_blank",rel:"noopener noreferrer"}},[t._v("原文"),e("OutboundLink")],1),t._v(" Why? Function declarations are hoisted, which means that it’s easy - too easy - to reference the function before it is defined in the file. This harms readability and maintainability. If you find that a function’s definition is large or complex enough that it is interfering with understanding the rest of the file, then perhaps it’s time to extract it to its own module! Don’t forget to explicitly name the expression, regardless of whether or not the name is inferred from the containing variable (which is often the case in modern browsers or when using compilers such as Babel). This eliminates any assumptions made about the Error’s call stack. ("),e("a",{attrs:{href:"https://github.com/airbnb/javascript/issues/794",target:"_blank",rel:"noopener noreferrer"}},[t._v("Discussion"),e("OutboundLink")],1),t._v(")")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction foo() {\n  // ...\n}\n\n// bad\nconst foo = function () {\n  // ...\n};\n\n// good\n// lexical name distinguished from the variable-referenced invocation(s)\n// 函数表达式名和声明的函数名是不一样的\nconst short = function longUniqueMoreDescriptiveLexicalFoo() {\n  // ...\n};\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#functions--iife",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.2"),e("OutboundLink")],1),t._v(" 把立即执行函数包裹在圆括号里。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/wrap-iife.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("wrap-iife")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? immediately invoked function expression = IIFE Why? 一个立即调用的函数表达式是一个单元 - 把它和他的调用者（圆括号）包裹起来，在括号中可以清晰的地表达这些。 Why? 注意：在模块化世界里，你几乎用不着 IIFE")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// immediately-invoked function expression (IIFE)\n(function () {\n  console.log('Welcome to the Internet. Please follow me.');\n}());\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#functions--in-blocks",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.3"),e("OutboundLink")],1),t._v(" 不要在非函数块（if、while等等）内声明函数。把这个函数分配给一个变量。浏览器会允许你这样做，但浏览器解析方式不同，这是一个坏消息。【详见"),e("code",[t._v("no-loop-func")]),t._v("】 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-loop-func.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-loop-func")]),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#functions--note-on-blocks",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.4"),e("OutboundLink")],1),t._v(" "),e("strong",[t._v("Note:")]),t._v(" 在ECMA-262中 [块 "),e("code",[t._v("block")]),t._v("] 的定义是： 一系列的语句； 但是函数声明不是一个语句。 函数表达式是一个语句。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nif (currentUser) {\n  function test() {\n    console.log('Nope.');\n  }\n}\n\n// good\nlet test;\nif (currentUser) {\n  test = () => {\n    console.log('Yup.');\n  };\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#functions--arguments-shadow",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.5"),e("OutboundLink")],1),t._v(" 不要用"),e("code",[t._v("arguments")]),t._v("命名参数。他的优先级高于每个函数作用域自带的 "),e("code",[t._v("arguments")]),t._v(" 对象， 这会导致函数自带的 "),e("code",[t._v("arguments")]),t._v(" 值被覆盖")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction foo(name, options, arguments) {\n  // ...\n}\n\n// good\nfunction foo(name, options, args) {\n  // ...\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#es6-rest",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.6"),e("OutboundLink")],1),t._v(" 不要使用"),e("code",[t._v("arguments")]),t._v("，用rest语法"),e("code",[t._v("...")]),t._v("代替。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/prefer-rest-params",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("prefer-rest-params")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? "),e("code",[t._v("...")]),t._v("明确你想用那个参数。而且rest参数是真数组，而不是类似数组的"),e("code",[t._v("arguments")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction concatenateAll() {\n  const args = Array.prototype.slice.call(arguments);\n  return args.join('');\n}\n\n// good\nfunction concatenateAll(...args) {\n  return args.join('');\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#es6-default-parameters",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.7"),e("OutboundLink")],1),t._v(" 用默认参数语法而不是在函数里对参数重新赋值。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// really bad\nfunction handleThings(opts) {\n  // 不， 我们不该改arguments\n  // 第二： 如果 opts 的值为 false, 它会被赋值为 {}\n  // 虽然你想这么写， 但是这个会带来一些细微的bug\n  opts = opts || {};\n  // ...\n}\n\n// still bad\nfunction handleThings(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  // ...\n}\n\n// good\nfunction handleThings(opts = {}) {\n  // ...\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#functions--default-side-effects",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.8"),e("OutboundLink")],1),t._v(" 默认参数避免副作用")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 他会令人迷惑不解， 比如下面这个， a到底等于几， 这个需要想一下。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var b = 1;\n// bad\nfunction count(a = b++) {\n  console.log(a);\n}\ncount();  // 1\ncount();  // 2\ncount(3); // 3\ncount();  // 3\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#functions--defaults-last",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.9"),e("OutboundLink")],1),t._v(" 把默认参数赋值放在最后")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction handleThings(opts = {}, name) {\n  // ...\n}\n\n// good\nfunction handleThings(name, opts = {}) {\n  // ...\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#functions--constructor",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.10"),e("OutboundLink")],1),t._v(" 不要用函数构造器创建函数。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-new-func",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-new-func")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 以这种方式创建函数将类似于字符串 eval()，这会打开漏洞。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nvar add = new Function('a', 'b', 'return a + b');\n\n// still bad\nvar subtract = Function('a', 'b', 'return a - b');\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#functions--signature-spacing",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.11"),e("OutboundLink")],1),t._v(" 函数签名部分要有空格。eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/space-before-function-paren",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("space-before-function-paren")]),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"http://eslint.org/docs/rules/space-before-blocks",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("space-before-blocks")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 统一性好，而且在你添加/删除一个名字的时候不需要添加/删除空格")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst f = function(){};\nconst g = function (){};\nconst h = function() {};\n\n// good\nconst x = function () {};\nconst y = function a() {};\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#functions--mutate-params",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.12"),e("OutboundLink")],1),t._v(" 不要改参数. eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-param-reassign.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-param-reassign")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 操作参数对象对原始调用者会导致意想不到的副作用。 就是不要改参数的数据结构，保留参数原始值和数据结构。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction f1(obj) {\n  obj.key = 1;\n};\n\n// good\nfunction f2(obj) {\n  const key = Object.prototype.hasOwnProperty.call(obj, 'key') ? obj.key : 1;\n};\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#functions--reassign-params",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.13"),e("OutboundLink")],1),t._v(" 不要对参数重新赋值。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-param-reassign.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-param-reassign")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 参数重新赋值会导致意外行为，尤其是对 "),e("code",[t._v("arguments")]),t._v("。这也会导致优化问题，特别是在V8里")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction f1(a) {\n  a = 1;\n  // ...\n}\n\nfunction f2(a) {\n  if (!a) { a = 1; }\n  // ...\n}\n\n// good\nfunction f3(a) {\n  const b = a || 1;\n  // ...\n}\n\nfunction f4(a = 1) {\n  // ...\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#functions--spread-vs-apply",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.14"),e("OutboundLink")],1),t._v(" 用"),e("code",[t._v("spread")]),t._v("操作符"),e("code",[t._v("...")]),t._v("去调用多变的函数更好。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/prefer-spread",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("prefer-spread")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 这样更清晰，你不必提供上下文，而且你不能轻易地用"),e("code",[t._v("apply")]),t._v("来组成"),e("code",[t._v("new")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst x = [1, 2, 3, 4, 5];\nconsole.log.apply(console, x);\n\n// good\nconst x = [1, 2, 3, 4, 5];\nconsole.log(...x);\n\n// bad\nnew (Function.prototype.bind.apply(Date, [null, 2016, 8, 5]));\n\n// good\nnew Date(...[2016, 8, 5]);\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#functions--signature-invocation-indentation",target:"_blank",rel:"noopener noreferrer"}},[t._v("7.15"),e("OutboundLink")],1),t._v(" 调用或者书写一个包含多个参数的函数应该像这个指南里的其他多行代码写法一样： 每行值包含一个参数，每行逗号结尾。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction foo(bar,\n             baz,\n             quux) {\n  // ...\n}\n\n// good 缩进不要太过分\nfunction foo(\n  bar,\n  baz,\n  quux,\n) {\n  // ...\n}\n\n// bad\nconsole.log(foo,\n  bar,\n  baz);\n\n// good\nconsole.log(\n  foo,\n  bar,\n  baz,\n);\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"arrow-functions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arrow-functions"}},[t._v("#")]),t._v(" Arrow Functions")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#arrows--use-them",target:"_blank",rel:"noopener noreferrer"}},[t._v("8.1"),e("OutboundLink")],1),t._v(" 当你一定要用函数表达式（在回调函数里）的时候就用箭头表达式吧。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/prefer-arrow-callback.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("prefer-arrow-callback")]),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"http://eslint.org/docs/rules/arrow-spacing.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("arrow-spacing")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 他创建了一个"),e("code",[t._v("this")]),t._v("的当前执行上下文的函数的版本，这通常就是你想要的；而且箭头函数是更简洁的语法")])]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 什么时候不用箭头函数： 如果你有一个相当复杂的函数，你可能会把这个逻辑移出到他自己的函数声明里。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\n[1, 2, 3].map(function (x) {\n  const y = x + 1;\n  return x * y;\n});\n\n// good\n[1, 2, 3].map((x) => {\n  const y = x + 1;\n  return x * y;\n});\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#arrows--implicit-return",target:"_blank",rel:"noopener noreferrer"}},[t._v("8.2"),e("OutboundLink")],1),t._v(" 如果函数体由一个没有副作用的"),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions",target:"_blank",rel:"noopener noreferrer"}},[t._v("表达式"),e("OutboundLink")],1),t._v("语句组成，删除大括号和return。否则，继续用大括号和 "),e("code",[t._v("return")]),t._v(" 语句。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/arrow-parens.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("arrow-parens")]),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"https://eslint.org/docs/rules/arrow-body-style.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("arrow-body-style")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 语法糖，当多个函数链在一起的时候好读")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\n[1, 2, 3].map(number => {\n  const nextNumber = number + 1;\n  `A string containing the ${nextNumber}.`;\n});\n\n// good\n[1, 2, 3].map(number => `A string containing the ${number}.`);\n\n// good\n[1, 2, 3].map((number) => {\n  const nextNumber = number + 1;\n  return `A string containing the ${nextNumber}.`;\n});\n\n// good\n[1, 2, 3].map((number, index) => ({\n  [index]: number\n}));\n\n// 表达式有副作用就不要用隐式return\nfunction foo(callback) {\n  const val = callback();\n  if (val === true) {\n    // Do something if callback returns true\n  }\n}\n\nlet bool = false;\n\n// bad\n// 这种情况会return bool = true, 不好\nfoo(() => bool = true);\n\n// good\nfoo(() => {\n  bool = true;\n});\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#arrows--paren-wrap",target:"_blank",rel:"noopener noreferrer"}},[t._v("8.3"),e("OutboundLink")],1),t._v(" 万一表达式涉及多行，把他包裹在圆括号里更可读。")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 这样清晰的显示函数的开始和结束")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\n['get', 'post', 'put'].map(httpMethod => Object.prototype.hasOwnProperty.call(\n    httpMagicObjectWithAVeryLongName,\n    httpMethod\n  )\n);\n\n// good\n['get', 'post', 'put'].map(httpMethod => (\n  Object.prototype.hasOwnProperty.call(\n    httpMagicObjectWithAVeryLongName,\n    httpMethod\n  )\n));\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#arrows--one-arg-parens",target:"_blank",rel:"noopener noreferrer"}},[t._v("8.4"),e("OutboundLink")],1),t._v(" 如果你的函数只有一个参数并且函数体没有大括号，就删除圆括号。否则，参数总是放在圆括号里。 注意： 一直用圆括号也是没问题，只需要配置 "),e("a",{attrs:{href:"https://eslint.org/docs/rules/arrow-parens#always",target:"_blank",rel:"noopener noreferrer"}},[t._v("“always” option"),e("OutboundLink")],1),t._v(" for eslint. eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/arrow-parens.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("arrow-parens")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 这样少一些混乱， 其实没啥语法上的讲究，就保持一个风格。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\n[1, 2, 3].map((x) => x * x);\n\n// good\n[1, 2, 3].map(x => x * x);\n\n// good\n[1, 2, 3].map(number => (\n  `A long string with the ${number}. It’s so long that we don’t want it to take up space on the .map line!`\n));\n\n// bad\n[1, 2, 3].map(x => {\n  const y = x + 1;\n  return x * y;\n});\n\n// good\n[1, 2, 3].map((x) => {\n  const y = x + 1;\n  return x * y;\n});\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#arrows--confusing",target:"_blank",rel:"noopener noreferrer"}},[t._v("8.5"),e("OutboundLink")],1),t._v(" 避免箭头函数("),e("code",[t._v("=>")]),t._v(")和比较操作符（"),e("code",[t._v("<=, >=")]),t._v("）混淆. eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-confusing-arrow",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-confusing-arrow")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst itemHeight = (item) => item.height <= 256 ? item.largeSize : item.smallSize;\n\n// bad\nconst itemHeight = (item) => item.height >= 256 ? item.largeSize : item.smallSize;\n\n// good\nconst itemHeight = (item) => (item.height <= 256 ? item.largeSize : item.smallSize);\n\n// good\nconst itemHeight = (item) => {\n  const { height, largeSize, smallSize } = item;\n  return height <= 256 ? largeSize : smallSize;\n};\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--implicit-arrow-linebreak",target:"_blank",rel:"noopener noreferrer"}},[t._v("8.6"),e("OutboundLink")],1),t._v(" 在隐式return中强制约束函数体的位置， 就写在箭头后面。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/implicit-arrow-linebreak",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("implicit-arrow-linebreak")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\n(foo) =>\n  bar;\n\n(foo) =>\n  (bar);\n\n// good\n(foo) => bar;\n(foo) => (bar);\n(foo) => (\n   bar\n)\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"classes-constructors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#classes-constructors"}},[t._v("#")]),t._v(" Classes & Constructors")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#constructors--use-class",target:"_blank",rel:"noopener noreferrer"}},[t._v("9.1"),e("OutboundLink")],1),t._v(" 常用"),e("code",[t._v("class")]),t._v("，避免直接操作"),e("code",[t._v("prototype")])]),t._v(" "),e("blockquote",[e("p",[t._v("Why? "),e("code",[t._v("class")]),t._v("语法更简洁更易理解")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction Queue(contents = []) {\n  this.queue = [...contents];\n}\nQueue.prototype.pop = function () {\n  const value = this.queue[0];\n  this.queue.splice(0, 1);\n  return value;\n};\n\n\n// good\nclass Queue {\n  constructor(contents = []) {\n    this.queue = [...contents];\n  }\n  pop() {\n    const value = this.queue[0];\n    this.queue.splice(0, 1);\n    return value;\n  }\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#constructors--extends",target:"_blank",rel:"noopener noreferrer"}},[t._v("9.2"),e("OutboundLink")],1),t._v(" 用"),e("code",[t._v("extends")]),t._v("实现继承")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 它是一种内置的方法来继承原型功能而不打破"),e("code",[t._v("instanceof")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst inherits = require('inherits');\nfunction PeekableQueue(contents) {\n  Queue.apply(this, contents);\n}\ninherits(PeekableQueue, Queue);\nPeekableQueue.prototype.peek = function () {\n  return this.queue[0];\n}\n\n// good\nclass PeekableQueue extends Queue {\n  peek() {\n    return this.queue[0];\n  }\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#constructors--chaining",target:"_blank",rel:"noopener noreferrer"}},[t._v("9.3"),e("OutboundLink")],1),t._v(" 方法可以返回"),e("code",[t._v("this")]),t._v("来实现方法链")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nJedi.prototype.jump = function () {\n  this.jumping = true;\n  return true;\n};\n\nJedi.prototype.setHeight = function (height) {\n  this.height = height;\n};\n\nconst luke = new Jedi();\nluke.jump(); // => true\nluke.setHeight(20); // => undefined\n\n// good\nclass Jedi {\n  jump() {\n    this.jumping = true;\n    return this;\n  }\n\n  setHeight(height) {\n    this.height = height;\n    return this;\n  }\n}\n\nconst luke = new Jedi();\n\nluke.jump()\n  .setHeight(20);\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#constructors--tostring",target:"_blank",rel:"noopener noreferrer"}},[t._v("9.4"),e("OutboundLink")],1),t._v(" 写一个定制的toString()方法是可以的，只要保证它是可以正常工作且没有副作用的")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Jedi {\n  constructor(options = {}) {\n    this.name = options.name || 'no name';\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  toString() {\n    return `Jedi - ${this.getName()}`;\n  }\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#constructors--no-useless",target:"_blank",rel:"noopener noreferrer"}},[t._v("9.5"),e("OutboundLink")],1),t._v(" 如果没有具体说明，类有默认的构造方法。一个空的构造函数或只是代表父类的构造函数是不需要写的。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-useless-constructor",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-useless-constructor")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nclass Jedi {\n  constructor() {}\n\n  getName() {\n    return this.name;\n  }\n}\n\n// bad\nclass Rey extends Jedi {\n  // 这种构造函数是不需要写的\n  constructor(...args) {\n    super(...args);\n  }\n}\n\n// good\nclass Rey extends Jedi {\n  constructor(...args) {\n    super(...args);\n    this.name = 'Rey';\n  }\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#classes--no-duplicate-members",target:"_blank",rel:"noopener noreferrer"}},[t._v("9.6"),e("OutboundLink")],1),t._v(" 避免重复类成员。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-dupe-class-members",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-dupe-class-members")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 重复类成员会默默的执行最后一个 —— 重复本身也是一个bug")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nclass Foo {\n  bar() { return 1; }\n  bar() { return 2; }\n}\n\n// good\nclass Foo {\n  bar() { return 1; }\n}\n\n// good\nclass Foo {\n  bar() { return 2; }\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#classes--methods-use-this",target:"_blank",rel:"noopener noreferrer"}},[t._v("9.7"),e("OutboundLink")],1),t._v(" 除非外部库或框架需要使用特定的非静态方法，否则类方法应该使用"),e("code",[t._v("this")]),t._v("或被做成静态方法。 作为一个实例方法应该表明它根据接收者的属性有不同的行为。eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/class-methods-use-this",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("class-methods-use-this")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nclass Foo {\n  bar() {\n    console.log('bar');\n  }\n}\n\n// good - this 被使用了 \nclass Foo {\n  bar() {\n    console.log(this.bar);\n  }\n}\n\n// good - constructor 不一定要使用this\nclass Foo {\n  constructor() {\n    // ...\n  }\n}\n\n// good - 静态方法不需要使用 this\nclass Foo {\n  static bar() {\n    console.log('bar');\n  }\n}\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"modules"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#modules"}},[t._v("#")]),t._v(" Modules")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#modules--use-them",target:"_blank",rel:"noopener noreferrer"}},[t._v("10.1"),e("OutboundLink")],1),t._v(" 用("),e("code",[t._v("import")]),t._v("/"),e("code",[t._v("export")]),t._v(") 模块而不是无标准的模块系统。你可以随时转到你喜欢的模块系统。")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 模块化是未来，让我们现在就开启未来吧。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst AirbnbStyleGuide = require('./AirbnbStyleGuide');\nmodule.exports = AirbnbStyleGuide.es6;\n\n// ok\nimport AirbnbStyleGuide from './AirbnbStyleGuide';\nexport default AirbnbStyleGuide.es6;\n\n// best\nimport { es6 } from './AirbnbStyleGuide';\nexport default es6;\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#modules--no-wildcard",target:"_blank",rel:"noopener noreferrer"}},[t._v("10.2"),e("OutboundLink")],1),t._v(" 不要用import通配符， 就是 "),e("code",[t._v("*")]),t._v(" 这种方式")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 这确保你有单个默认的导出")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nimport * as AirbnbStyleGuide from './AirbnbStyleGuide';\n\n// good\nimport AirbnbStyleGuide from './AirbnbStyleGuide';\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#modules--no-export-from-import",target:"_blank",rel:"noopener noreferrer"}},[t._v("10.3"),e("OutboundLink")],1),t._v(" 不要直接从import中直接export")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 虽然一行是简洁的，有一个明确的方式进口和一个明确的出口方式来保证一致性。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\n// filename es6.js\nexport { es6 as default } from './AirbnbStyleGuide';\n\n// good\n// filename es6.js\nimport { es6 } from './AirbnbStyleGuide';\nexport default es6;\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#modules--no-duplicate-imports",target:"_blank",rel:"noopener noreferrer"}},[t._v("10.4"),e("OutboundLink")],1),t._v(" 一个路径只 import 一次。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-duplicate-imports",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-duplicate-imports")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 从同一个路径下import多行会使代码难以维护")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nimport foo from 'foo';\n// … some other imports … //\nimport { named1, named2 } from 'foo';\n\n// good\nimport foo, { named1, named2 } from 'foo';\n\n// good\nimport foo, {\n  named1,\n  named2,\n} from 'foo';\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#modules--no-mutable-exports",target:"_blank",rel:"noopener noreferrer"}},[t._v("10.5"),e("OutboundLink")],1),t._v(" 不要导出可变的东西 eslint: "),e("a",{attrs:{href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("import/no-mutable-exports")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 变化通常都是需要避免，特别是当你要输出可变的绑定。虽然在某些场景下可能需要这种技术，但总的来说应该导出常量。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nlet foo = 3;\nexport { foo }\n\n// good\nconst foo = 3;\nexport { foo }\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#modules--prefer-default-export",target:"_blank",rel:"noopener noreferrer"}},[t._v("10.6"),e("OutboundLink")],1),t._v(" 在一个单一导出模块里，用 "),e("code",[t._v("export default")]),t._v(" 更好。 eslint: "),e("a",{attrs:{href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("import/prefer-default-export")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 鼓励使用更多文件，每个文件只做一件事情并导出，这样可读性和可维护性更好。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nexport function foo() {}\n\n// good\nexport default function foo() {}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#modules--imports-first",target:"_blank",rel:"noopener noreferrer"}},[t._v("10.7"),e("OutboundLink")],1),t._v(" "),e("code",[t._v("import")]),t._v(" 放在其他所有语句之前。 eslint: "),e("a",{attrs:{href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("import/first")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 让"),e("code",[t._v("import")]),t._v("放在最前面防止意外行为。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nimport foo from 'foo';\nfoo.init();\n\nimport bar from 'bar';\n\n// good\nimport foo from 'foo';\nimport bar from 'bar';\n\nfoo.init();\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#modules--multiline-imports-over-newlines",target:"_blank",rel:"noopener noreferrer"}},[t._v("10.8"),e("OutboundLink")],1),t._v(" 多行import应该缩进，就像多行数组和对象字面量")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 花括号与样式指南中每个其他花括号块遵循相同的缩进规则，逗号也是。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nimport {longNameA, longNameB, longNameC, longNameD, longNameE} from 'path';\n\n// good\nimport {\n  longNameA,\n  longNameB,\n  longNameC,\n  longNameD,\n  longNameE,\n} from 'path';\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#modules--no-webpack-loader-syntax",target:"_blank",rel:"noopener noreferrer"}},[t._v("10.9"),e("OutboundLink")],1),t._v(" 在import语句里不允许Webpack loader语法 eslint: "),e("a",{attrs:{href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("import/no-webpack-loader-syntax")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 一旦用Webpack语法在import里会把代码耦合到模块绑定器。最好是在"),e("code",[t._v("webpack.config.js")]),t._v("里写webpack loader语法")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nimport fooSass from 'css!sass!foo.scss';\nimport barCss from 'style!css!bar.css';\n\n// good\nimport fooSass from 'foo.scss';\nimport barCss from 'bar.css';\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"iterators-and-generators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iterators-and-generators"}},[t._v("#")]),t._v(" Iterators and Generators")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#iterators--nope",target:"_blank",rel:"noopener noreferrer"}},[t._v("11.1"),e("OutboundLink")],1),t._v(" 不要用遍历器。用JavaScript高级函数代替"),e("code",[t._v("for-in")]),t._v("、 "),e("code",[t._v("for-of")]),t._v("。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-iterator.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-iterator")]),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-restricted-syntax",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-restricted-syntax")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 这强调了我们不可变的规则。 处理返回值的纯函数比副作用更容易。")])]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 用数组的这些迭代方法： "),e("code",[t._v("map()")]),t._v(" / "),e("code",[t._v("every()")]),t._v(" / "),e("code",[t._v("filter()")]),t._v(" / "),e("code",[t._v("find()")]),t._v(" / "),e("code",[t._v("findIndex()")]),t._v(" / "),e("code",[t._v("reduce()")]),t._v(" / "),e("code",[t._v("some()")]),t._v(" / ... , 用对象的这些方法 "),e("code",[t._v("Object.keys()")]),t._v(" / "),e("code",[t._v("Object.values()")]),t._v(" / "),e("code",[t._v("Object.entries()")]),t._v(" 去产生一个数组， 这样你就能去遍历对象了。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const numbers = [1, 2, 3, 4, 5];\n\n// bad\nlet sum = 0;\nfor (let num of numbers) {\n  sum += num;\n}\nsum === 15;\n\n// good\nlet sum = 0;\nnumbers.forEach(num => sum += num);\nsum === 15;\n\n// best (use the functional force)\nconst sum = numbers.reduce((total, num) => total + num, 0);\nsum === 15;\n\n// bad\nconst increasedByOne = [];\nfor (let i = 0; i < numbers.length; i++) {\n  increasedByOne.push(numbers[i] + 1);\n}\n\n// good\nconst increasedByOne = [];\nnumbers.forEach(num => increasedByOne.push(num + 1));\n\n// best (keeping it functional)\nconst increasedByOne = numbers.map(num => num + 1);\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#generators--nope",target:"_blank",rel:"noopener noreferrer"}},[t._v("11.2"),e("OutboundLink")],1),t._v(" 现在不要用generator")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 它在es5上支持的不好")])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#generators--spacing",target:"_blank",rel:"noopener noreferrer"}},[t._v("11.3"),e("OutboundLink")],1),t._v(" 如果你一定要用，或者你忽略"),e("a",{attrs:{href:"https://github.com/lin-123/javascript#generators--nope",target:"_blank",rel:"noopener noreferrer"}},[t._v("我们的建议"),e("OutboundLink")],1),t._v(", 请确保它们的函数签名空格是得当的。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/generator-star-spacing",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("generator-star-spacing")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? "),e("code",[t._v("function")]),t._v(" 和 "),e("code",[t._v("*")]),t._v(" 是同一概念关键字 - "),e("code",[t._v("*")]),t._v("不是"),e("code",[t._v("function")]),t._v("的修饰符，"),e("code",[t._v("function*")]),t._v("是一个和"),e("code",[t._v("function")]),t._v("不一样的独特结构")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction * foo() {\n  // ...\n}\n\n// bad\nconst bar = function * () {\n  // ...\n}\n\n// bad\nconst baz = function *() {\n  // ...\n}\n\n// bad\nconst quux = function*() {\n  // ...\n}\n\n// bad\nfunction*foo() {\n  // ...\n}\n\n// bad\nfunction *foo() {\n  // ...\n}\n\n// very bad\nfunction\n*\nfoo() {\n  // ...\n}\n\n// very bad\nconst wat = function\n*\n() {\n  // ...\n}\n\n// good\nfunction* foo() {\n  // ...\n}\n\n// good\nconst foo = function* () {\n  // ...\n}\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"properties"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#properties--dot",target:"_blank",rel:"noopener noreferrer"}},[t._v("12.1"),e("OutboundLink")],1),t._v(" 访问属性时使用点符号. eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/dot-notation.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("dot-notation")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const luke = {\n  jedi: true,\n  age: 28,\n};\n\n// bad\nconst isJedi = luke['jedi'];\n\n// good\nconst isJedi = luke.jedi;\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#properties--bracket",target:"_blank",rel:"noopener noreferrer"}},[t._v("12.2"),e("OutboundLink")],1),t._v(" 当获取的属性是变量时用方括号"),e("code",[t._v("[]")]),t._v("取")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const luke = {\n  jedi: true,\n  age: 28,\n};\n\nfunction getProp(prop) {\n  return luke[prop];\n}\n\nconst isJedi = getProp('jedi');\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#es2016-properties--exponentiation-operator",target:"_blank",rel:"noopener noreferrer"}},[t._v("12.3"),e("OutboundLink")],1),t._v(" 做幂运算时用幂操作符 "),e("code",[t._v("**")]),t._v(" 。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/no-restricted-properties",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-restricted-properties")]),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst binary = Math.pow(2, 10);\n\n// good\nconst binary = 2 ** 10;\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"variables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[t._v("#")]),t._v(" Variables")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#variables--const",target:"_blank",rel:"noopener noreferrer"}},[t._v("13.1"),e("OutboundLink")],1),t._v(" 用"),e("code",[t._v("const")]),t._v("或"),e("code",[t._v("let")]),t._v("声明变量。不这样做会导致全局变量。 我们想要避免污染全局命名空间。首长这样警告我们。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-undef",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-undef")]),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"http://eslint.org/docs/rules/prefer-const",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("prefer-const")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nsuperPower = new SuperPower();\n\n// good\nconst superPower = new SuperPower();\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#variables--one-const",target:"_blank",rel:"noopener noreferrer"}},[t._v("13.2"),e("OutboundLink")],1),t._v(" 每个变量都用一个 "),e("code",[t._v("const")]),t._v(" 或 "),e("code",[t._v("let")]),t._v("。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/one-var.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("one-var")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 这种方式很容易去声明新的变量，你不用去考虑把"),e("code",[t._v(";")]),t._v("调换成"),e("code",[t._v(",")]),t._v("，或者引入一个只有标点的不同的变化。这种做法也可以是你在调试的时候单步每个声明语句，而不是一下跳过所有声明。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst items = getItems(),\n    goSportsTeam = true,\n    dragonball = 'z';\n\n// bad\n// (compare to above, and try to spot the mistake)\nconst items = getItems(),\n    goSportsTeam = true;\n    dragonball = 'z';\n\n// good\nconst items = getItems();\nconst goSportsTeam = true;\nconst dragonball = 'z';\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#variables--const-let-group",target:"_blank",rel:"noopener noreferrer"}},[t._v("13.3"),e("OutboundLink")],1),t._v(" "),e("code",[t._v("const")]),t._v("放一起，"),e("code",[t._v("let")]),t._v("放一起")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 在你需要分配一个新的变量， 而这个变量依赖之前分配过的变量的时候，这种做法是有帮助的")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nlet i, len, dragonball,\n    items = getItems(),\n    goSportsTeam = true;\n\n// bad\nlet i;\nconst items = getItems();\nlet dragonball;\nconst goSportsTeam = true;\nlet len;\n\n// good\nconst goSportsTeam = true;\nconst items = getItems();\nlet dragonball;\nlet i;\nlet length;\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#variables--define-where-used",target:"_blank",rel:"noopener noreferrer"}},[t._v("13.4"),e("OutboundLink")],1),t._v(" 在你需要的地方声明变量，但是要放在合理的位置")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? "),e("code",[t._v("let")]),t._v(" 和 "),e("code",[t._v("const")]),t._v(" 都是块级作用域而不是函数级作用域")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad - unnecessary function call\nfunction checkName(hasName) {\n  const name = getName();\n\n  if (hasName === 'test') {\n    return false;\n  }\n\n  if (name === 'test') {\n    this.setName('');\n    return false;\n  }\n\n  return name;\n}\n\n// good\nfunction checkName(hasName) {\n  if (hasName === 'test') {\n    return false;\n  }\n\n  // 在需要的时候分配\n  const name = getName();\n\n  if (name === 'test') {\n    this.setName('');\n    return false;\n  }\n\n  return name;\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#variables--no-chain-assignment",target:"_blank",rel:"noopener noreferrer"}},[t._v("13.5"),e("OutboundLink")],1),t._v(" 不要使用链接变量分配。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/no-multi-assign",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-multi-assign")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 链接变量分配创建隐式全局变量。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\n(function example() {\n  // JavaScript 将这一段解释为\n  // let a = ( b = ( c = 1 ) );\n  // let 只对变量 a 起作用; 变量 b 和 c 都变成了全局变量\n  let a = b = c = 1;\n}());\n\nconsole.log(a); // undefined\nconsole.log(b); // 1\nconsole.log(c); // 1\n\n// good\n(function example() {\n  let a = 1;\n  let b = a;\n  let c = a;\n}());\n\nconsole.log(a); // undefined\nconsole.log(b); // undefined\nconsole.log(c); // undefined\n\n// `const` 也是如此\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#variables--unary-increment-decrement",target:"_blank",rel:"noopener noreferrer"}},[t._v("13.6"),e("OutboundLink")],1),t._v(" 不要使用一元自增自减运算符（"),e("code",[t._v("++")]),t._v("， "),e("code",[t._v("--")]),t._v("）. eslint "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-plusplus",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-plusplus")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 根据eslint文档，一元增量和减量语句受到自动分号插入的影响，并且可能会导致应用程序中的值递增或递减的无声错误。 使用"),e("code",[t._v("num + = 1")]),t._v("而不是"),e("code",[t._v("num ++")]),t._v("或"),e("code",[t._v("num ++")]),t._v("语句来表达你的值也是更有表现力的。 禁止一元增量和减量语句还会阻止您无意地预增/预减值，这也会导致程序出现意外行为。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  // bad\n\n  const array = [1, 2, 3];\n  let num = 1;\n  num++;\n  --num;\n\n  let sum = 0;\n  let truthyCount = 0;\n  for (let i = 0; i < array.length; i++) {\n    let value = array[i];\n    sum += value;\n    if (value) {\n      truthyCount++;\n    }\n  }\n\n  // good\n\n  const array = [1, 2, 3];\n  let num = 1;\n  num += 1;\n  num -= 1;\n\n  const sum = array.reduce((a, b) => a + b, 0);\n  const truthyCount = array.filter(Boolean).length;\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#variables--linebreak",target:"_blank",rel:"noopener noreferrer"}},[t._v("13.7"),e("OutboundLink")],1),t._v(" 在赋值的时候避免在 "),e("code",[t._v("=")]),t._v(" 前/后换行。 如果你的赋值语句超出 "),e("a",{attrs:{href:"https://eslint.org/docs/rules/max-len.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("max-len")]),e("OutboundLink")],1),t._v("， 那就用小括号把这个值包起来再换行。 eslint "),e("a",{attrs:{href:"https://eslint.org/docs/rules/operator-linebreak.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("operator-linebreak")]),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 在 "),e("code",[t._v("=")]),t._v(" 附近换行容易混淆这个赋值语句。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst foo =\n  superLongLongLongLongLongLongLongLongFunctionName();\n\n// bad\nconst foo\n  = 'superLongLongLongLongLongLongLongLongString';\n\n// good\nconst foo = (\n  superLongLongLongLongLongLongLongLongFunctionName()\n);\n\n// good\nconst foo = 'superLongLongLongLongLongLongLongLongString';\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#variables--no-unused-vars",target:"_blank",rel:"noopener noreferrer"}},[t._v("13.8"),e("OutboundLink")],1),t._v(" 不允许有未使用的变量。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/no-unused-vars",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-unused-vars")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 一个声明了但未使用的变量更像是由于重构未完成产生的错误。这种在代码中出现的变量会使阅读者迷惑。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\n\nvar some_unused_var = 42;\n\n// 写了没用\nvar y = 10;\ny = 5;\n\n// 变量改了自己的值，也没有用这个变量\nvar z = 0;\nz = z + 1;\n\n// 参数定义了但未使用\nfunction getX(x, y) {\n    return x;\n}\n\n// good\nfunction getXPlusY(x, y) {\n  return x + y;\n}\n\nvar x = 1;\nvar y = a + 2;\n\nalert(getXPlusY(x, y));\n\n// 'type' 即使没有使用也可以可以被忽略， 因为这个有一个 rest 取值的属性。\n// 这是从对象中抽取一个忽略特殊字段的对象的一种形式\nvar { type, ...coords } = data;\n// 'coords' 现在就是一个没有 'type' 属性的 'data' 对象\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"hoisting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hoisting"}},[t._v("#")]),t._v(" Hoisting")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#hoisting--about",target:"_blank",rel:"noopener noreferrer"}},[t._v("14.1"),e("OutboundLink")],1),t._v(" "),e("code",[t._v("var")]),t._v("声明会被提前到他的作用域的最前面，它分配的值还没有提前。"),e("code",[t._v("const")]),t._v(" 和 "),e("code",[t._v("let")]),t._v("被赋予了新的调用概念"),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let",target:"_blank",rel:"noopener noreferrer"}},[t._v("时效区 —— Temporal Dead Zones (TDZ)"),e("OutboundLink")],1),t._v("。 重要的是要知道为什么 "),e("a",{attrs:{href:"http://es-discourse.com/t/why-typeof-is-no-longer-safe/15",target:"_blank",rel:"noopener noreferrer"}},[t._v("typeof不再安全"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 我们知道这个不会工作，假设没有定义全局的notDefined\nfunction example() {\n  console.log(notDefined); // => throws a ReferenceError\n}\n\n// 在你引用的地方之后声明一个变量，他会正常输出是因为变量作用域上升。\n// 注意： declaredButNotAssigned的值没有上升\nfunction example() {\n  console.log(declaredButNotAssigned); // => undefined\n  var declaredButNotAssigned = true;\n}\n\n// 解释器把变量声明提升到作用域最前面，\n// 可以重写成如下例子， 二者意义相同\nfunction example() {\n  let declaredButNotAssigned;\n  console.log(declaredButNotAssigned); // => undefined\n  declaredButNotAssigned = true;\n}\n\n// 用 const， let就不一样了\nfunction example() {\n  console.log(declaredButNotAssigned); // => throws a ReferenceError\n  console.log(typeof declaredButNotAssigned); // => throws a ReferenceError\n  const declaredButNotAssigned = true;\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#hoisting--anon-expressions",target:"_blank",rel:"noopener noreferrer"}},[t._v("14.2"),e("OutboundLink")],1),t._v(" 匿名函数表达式和 "),e("code",[t._v("var")]),t._v(" 情况相同")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function example() {\n  console.log(anonymous); // => undefined\n\n  anonymous(); // => TypeError anonymous is not a function\n\n  var anonymous = function () {\n    console.log('anonymous function expression');\n  };\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#hoisting--named-expresions",target:"_blank",rel:"noopener noreferrer"}},[t._v("14.3"),e("OutboundLink")],1),t._v(" 已命名函数表达式提升他的变量名，不是函数名或函数体")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function example() {\n  console.log(named); // => undefined\n\n  named(); // => TypeError named is not a function\n\n  superPower(); // => ReferenceError superPower is not defined\n\n  var named = function superPower() {\n    console.log('Flying');\n  };\n}\n\n// 函数名和变量名一样是也如此\nfunction example() {\n  console.log(named); // => undefined\n\n  named(); // => TypeError named is not a function\n\n  var named = function named() {\n    console.log('named');\n  };\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#hoisting--declarations",target:"_blank",rel:"noopener noreferrer"}},[t._v("14.4"),e("OutboundLink")],1),t._v(" 函数声明则提升了函数名和函数体")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function example() {\n  superPower(); // => Flying\n\n  function superPower() {\n    console.log('Flying');\n  }\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("详情请见"),e("a",{attrs:{href:"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript Scoping & Hoisting"),e("OutboundLink")],1),t._v(" by "),e("a",{attrs:{href:"http://www.adequatelygood.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ben Cherry"),e("OutboundLink")],1),t._v(".")])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"comparison-operators-equality"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#comparison-operators-equality"}},[t._v("#")]),t._v(" Comparison Operators & Equality")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#comparison--eqeqeq",target:"_blank",rel:"noopener noreferrer"}},[t._v("15.1"),e("OutboundLink")],1),t._v(" 用 "),e("code",[t._v("===")]),t._v(" 和 "),e("code",[t._v("!==")]),t._v(" 而不是 "),e("code",[t._v("==")]),t._v(" 和 "),e("code",[t._v("!=")]),t._v(". eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/eqeqeq.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("eqeqeq")]),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#comparison--if",target:"_blank",rel:"noopener noreferrer"}},[t._v("15.2"),e("OutboundLink")],1),t._v(" 条件语句如'if'语句使用强制`ToBoolean'抽象方法来评估它们的表达式，并且始终遵循以下简单规则：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Objects")]),t._v(" 计算成 "),e("strong",[t._v("true")])]),t._v(" "),e("li",[e("strong",[t._v("Undefined")]),t._v(" 计算成 "),e("strong",[t._v("false")])]),t._v(" "),e("li",[e("strong",[t._v("Null")]),t._v(" 计算成 "),e("strong",[t._v("false")])]),t._v(" "),e("li",[e("strong",[t._v("Booleans")]),t._v(" 计算成 "),e("strong",[t._v("the value of the boolean")])]),t._v(" "),e("li",[t._v("Numbers\n"),e("ul",[e("li",[e("strong",[t._v("+0, -0, or NaN")]),t._v(" 计算成 "),e("strong",[t._v("false")])]),t._v(" "),e("li",[t._v("其他 "),e("strong",[t._v("true")])])])]),t._v(" "),e("li",[t._v("Strings\n"),e("ul",[e("li",[e("code",[t._v("''")]),t._v(" 计算成 "),e("strong",[t._v("false")])]),t._v(" "),e("li",[t._v("其他 "),e("strong",[t._v("true")])])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("if ([0] && []) {\n  // true\n  // 数组（即使是空数组）是对象，对象会计算成true\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#comparison--shortcuts",target:"_blank",rel:"noopener noreferrer"}},[t._v("15.3"),e("OutboundLink")],1),t._v(" 布尔值用缩写，而字符串和数字要明确比较对象")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nif (isValid === true) {\n  // ...\n}\n\n// good\nif (isValid) {\n  // ...\n}\n\n// bad\nif (name) {\n  // ...\n}\n\n// good\nif (name !== '') {\n  // ...\n}\n\n// bad\nif (collection.length) {\n  // ...\n}\n\n// good\nif (collection.length > 0) {\n  // ...\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#comparison--moreinfo",target:"_blank",rel:"noopener noreferrer"}},[t._v("15.4"),e("OutboundLink")],1),t._v(" 更多信息请见Angus Croll的"),e("a",{attrs:{href:"https://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108",target:"_blank",rel:"noopener noreferrer"}},[t._v("真理、平等和JavaScript —— Truth Equality and JavaScript"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#comparison--switch-blocks",target:"_blank",rel:"noopener noreferrer"}},[t._v("15.5"),e("OutboundLink")],1),t._v(" 在"),e("code",[t._v("case")]),t._v("和"),e("code",[t._v("default")]),t._v("分句里用大括号创建一块包含语法声明的区域(e.g. "),e("code",[t._v("let")]),t._v(", "),e("code",[t._v("const")]),t._v(", "),e("code",[t._v("function")]),t._v(", and "),e("code",[t._v("class")]),t._v("). eslint rules: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-case-declarations.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-case-declarations")]),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 语法声明在整个"),e("code",[t._v("switch")]),t._v("的代码块里都可见，但是只有当其被分配后才会初始化，他的初始化时当这个"),e("code",[t._v("case")]),t._v("被执行时才产生。 当多个"),e("code",[t._v("case")]),t._v("分句试图定义同一个事情时就出问题了")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nswitch (foo) {\n  case 1:\n    let x = 1;\n    break;\n  case 2:\n    const y = 2;\n    break;\n  case 3:\n    function f() {\n      // ...\n    }\n    break;\n  default:\n    class C {}\n}\n\n// good\nswitch (foo) {\n  case 1: {\n    let x = 1;\n    break;\n  }\n  case 2: {\n    const y = 2;\n    break;\n  }\n  case 3: {\n    function f() {\n      // ...\n    }\n    break;\n  }\n  case 4:\n    bar();\n    break;\n  default: {\n    class C {}\n  }\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#comparison--nested-ternaries",target:"_blank",rel:"noopener noreferrer"}},[t._v("15.6"),e("OutboundLink")],1),t._v(" 三元表达式不应该嵌套，通常是单行表达式。")]),t._v(" "),e("p",[t._v("eslint rules: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-nested-ternary.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-nested-ternary")]),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst foo = maybe1 > maybe2\n  ? \"bar\"\n  : value1 > value2 ? \"baz\" : null;\n\n// better\nconst maybeNull = value1 > value2 ? 'baz' : null;\n\nconst foo = maybe1 > maybe2\n  ? 'bar'\n  : maybeNull;\n\n// best\nconst maybeNull = value1 > value2 ? 'baz' : null;\n\nconst foo = maybe1 > maybe2 ? 'bar' : maybeNull;\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#comparison--unneeded-ternary",target:"_blank",rel:"noopener noreferrer"}},[t._v("15.7"),e("OutboundLink")],1),t._v(" 避免不需要的三元表达式")]),t._v(" "),e("p",[t._v("eslint rules: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-unneeded-ternary.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-unneeded-ternary")]),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst foo = a ? a : b;\nconst bar = c ? true : false;\nconst baz = c ? false : true;\n\n// good\nconst foo = a || b;\nconst bar = !!c;\nconst baz = !c;\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#comparison--no-mixed-operators",target:"_blank",rel:"noopener noreferrer"}},[t._v("15.8"),e("OutboundLink")],1),t._v(" 用圆括号来混合这些操作符。 只有当标准的算术运算符("),e("code",[t._v("+")]),t._v(", "),e("code",[t._v("-")]),t._v(", "),e("code",[t._v("*")]),t._v(", & "),e("code",[t._v("/")]),t._v(")， 并且它们的优先级显而易见时，可以不用圆括号括起来。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/no-mixed-operators.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-mixed-operators")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 这提高了可读性，并且明确了开发者的意图")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst foo = a && b < 0 || c > 0 || d + 1 === 0;\n\n// bad\nconst bar = a ** b - 5 % d;\n\n// bad\n// 别人会陷入(a || b) && c 的迷惑中\nif (a || b && c) {\n  return d;\n}\n\n// good\nconst foo = (a && b < 0) || c > 0 || (d + 1 === 0);\n\n// good\nconst bar = (a ** b) - (5 % d);\n\n// good\nif (a || (b && c)) {\n  return d;\n}\n\n// good\nconst bar = a + b / c * d;\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"blocks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#blocks"}},[t._v("#")]),t._v(" Blocks")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#blocks--braces",target:"_blank",rel:"noopener noreferrer"}},[t._v("16.1"),e("OutboundLink")],1),t._v(" 用大括号包裹多行代码块。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/nonblock-statement-body-position",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("nonblock-statement-body-position")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nif (test)\n  return false;\n\n// good\nif (test) return false;\n\n// good\nif (test) {\n  return false;\n}\n\n// bad\nfunction foo() { return false; }\n\n// good\nfunction bar() {\n  return false;\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#blocks--cuddled-elses",target:"_blank",rel:"noopener noreferrer"}},[t._v("16.2"),e("OutboundLink")],1),t._v(" "),e("code",[t._v("if")]),t._v("表达式的"),e("code",[t._v("else")]),t._v("和"),e("code",[t._v("if")]),t._v("的关闭大括号在一行。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/brace-style.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("brace-style")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nif (test) {\n  thing1();\n  thing2();\n}\nelse {\n  thing3();\n}\n\n// good\nif (test) {\n  thing1();\n  thing2();\n} else {\n  thing3();\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#blocks--no-else-return",target:"_blank",rel:"noopener noreferrer"}},[t._v("16.3"),e("OutboundLink")],1),t._v(" 如果 "),e("code",[t._v("if")]),t._v(" 语句中总是需要用 "),e("code",[t._v("return")]),t._v(" 返回， 那后续的 "),e("code",[t._v("else")]),t._v(" 就不需要写了。 "),e("code",[t._v("if")]),t._v(" 块中包含 "),e("code",[t._v("return")]),t._v("， 它后面的 "),e("code",[t._v("else if")]),t._v(" 块中也包含了 "),e("code",[t._v("return")]),t._v("， 这个时候就可以把 "),e("code",[t._v("return")]),t._v(" 分到多个 "),e("code",[t._v("if")]),t._v(" 语句块中。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/no-else-return",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-else-return")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction foo() {\n  if (x) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n// bad\nfunction cats() {\n  if (x) {\n    return x;\n  } else if (y) {\n    return y;\n  }\n}\n\n// bad\nfunction dogs() {\n  if (x) {\n    return x;\n  } else {\n    if (y) {\n      return y;\n    }\n  }\n}\n\n// good\nfunction foo() {\n  if (x) {\n    return x;\n  }\n\n  return y;\n}\n\n// good\nfunction cats() {\n  if (x) {\n    return x;\n  }\n\n  if (y) {\n    return y;\n  }\n}\n\n// good\nfunction dogs(x) {\n  if (x) {\n    if (z) {\n      return y;\n    }\n  } else {\n    return z;\n  }\n}\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"control-statements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#control-statements"}},[t._v("#")]),t._v(" Control Statements")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#control-statements",target:"_blank",rel:"noopener noreferrer"}},[t._v("17.1"),e("OutboundLink")],1),t._v(" 当你的控制语句("),e("code",[t._v("if")]),t._v(", "),e("code",[t._v("while")]),t._v(" 等)太长或者超过最大长度限制的时候， 把每一个(组)判断条件放在单独一行里。 逻辑操作符放在行首。")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 把逻辑操作符放在行首是让操作符的对齐方式和链式函数保持一致。这提高了可读性，也让复杂逻辑更容易看清楚。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nif ((foo === 123 || bar === 'abc') && doesItLookGoodWhenItBecomesThatLong() && isThisReallyHappening()) {\n  thing1();\n}\n\n// bad\nif (foo === 123 &&\n  bar === 'abc') {\n  thing1();\n}\n\n// bad\nif (foo === 123\n  && bar === 'abc') {\n  thing1();\n}\n\n// bad\nif (\n  foo === 123 &&\n  bar === 'abc'\n) {\n  thing1();\n}\n\n// good\nif (\n  foo === 123\n  && bar === 'abc'\n) {\n  thing1();\n}\n\n// good\nif (\n  (foo === 123 || bar === 'abc')\n  && doesItLookGoodWhenItBecomesThatLong()\n  && isThisReallyHappening()\n) {\n  thing1();\n}\n\n// good\nif (foo === 123 && bar === 'abc') {\n  thing1();\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#control-statements--value-selection",target:"_blank",rel:"noopener noreferrer"}},[t._v("17.2"),e("OutboundLink")],1),t._v(" 不要用选择操作符代替控制语句。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\n!isRunning && startRunning();\n\n// good\nif (!isRunning) {\n  startRunning();\n}\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"comments"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#comments"}},[t._v("#")]),t._v(" Comments")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#comments--multiline",target:"_blank",rel:"noopener noreferrer"}},[t._v("18.1"),e("OutboundLink")],1),t._v(" 多行注释用 "),e("code",[t._v("/** ... */")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\n// make() returns a new element\n// based on the passed in tag name\n//\n// @param {String} tag\n// @return {Element} element\nfunction make(tag) {\n\n  // ...\n\n  return element;\n}\n\n// good\n/**\n * make() returns a new element\n * based on the passed-in tag name\n */\nfunction make(tag) {\n\n  // ...\n\n  return element;\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#comments--singleline",target:"_blank",rel:"noopener noreferrer"}},[t._v("18.2"),e("OutboundLink")],1),t._v(" 单行注释用"),e("code",[t._v("//")]),t._v("，将单行注释放在被注释区域上面。如果注释不是在第一行，那么注释前面就空一行")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst active = true;  // is current tab\n\n// good\n// is current tab\nconst active = true;\n\n// bad\nfunction getType() {\n  console.log('fetching type...');\n  // set the default type to 'no type'\n  const type = this._type || 'no type';\n\n  return type;\n}\n\n// good\nfunction getType() {\n  console.log('fetching type...');\n\n  // set the default type to 'no type'\n  const type = this._type || 'no type';\n\n  return type;\n}\n\n// also good\nfunction getType() {\n  // set the default type to 'no type'\n  const type = this._type || 'no type';\n\n  return type;\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#comments--spaces",target:"_blank",rel:"noopener noreferrer"}},[t._v("18.3"),e("OutboundLink")],1),t._v(" 所有注释开头空一个，方便阅读。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/spaced-comment",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("spaced-comment")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\n//is current tab\nconst active = true;\n\n// good\n// is current tab\nconst active = true;\n\n// bad\n/**\n *make() returns a new element\n *based on the passed-in tag name\n */\nfunction make(tag) {\n\n  // ...\n\n  return element;\n}\n\n// good\n/**\n * make() returns a new element\n * based on the passed-in tag name\n */\nfunction make(tag) {\n\n  // ...\n\n  return element;\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#comments--actionitems",target:"_blank",rel:"noopener noreferrer"}},[t._v("18.4"),e("OutboundLink")],1),t._v(" 在你的注释前使用"),e("code",[t._v("FIXME'或")]),t._v("TODO'前缀， 这有助于其他开发人员快速理解你指出的需要重新访问的问题， 或者您建议需要实现的问题的解决方案。 这些不同于常规注释，因为它们是可操作的。 动作是"),e("code",[t._v("FIXME： - 需要计算出来")]),t._v("或"),e("code",[t._v("TODO： - 需要实现")]),t._v("。")])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#comments--fixme",target:"_blank",rel:"noopener noreferrer"}},[t._v("18.5"),e("OutboundLink")],1),t._v(" 用"),e("code",[t._v("// FIXME:")]),t._v("给问题做注释")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Calculator extends Abacus {\n  constructor() {\n    super();\n\n    // FIXME: shouldn't use a global here\n    total = 0;\n  }\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#comments--todo",target:"_blank",rel:"noopener noreferrer"}},[t._v("18.6"),e("OutboundLink")],1),t._v(" 用"),e("code",[t._v("// TODO:")]),t._v("去注释问题的解决方案")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Calculator extends Abacus {\n  constructor() {\n    super();\n\n    // TODO: total should be configurable by an options param\n    this.total = 0;\n  }\n}\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"whitespace"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#whitespace"}},[t._v("#")]),t._v(" Whitespace")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--spaces",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.1"),e("OutboundLink")],1),t._v(" tab用两个空格. eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/indent.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("indent")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction foo() {\n∙∙∙∙const name;\n}\n\n// bad\nfunction bar() {\n∙const name;\n}\n\n// good\nfunction baz() {\n∙∙const name;\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--before-blocks",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.2"),e("OutboundLink")],1),t._v(" 在大括号前空一格。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/space-before-blocks.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("space-before-blocks")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction test(){\n  console.log('test');\n}\n\n// good\nfunction test() {\n  console.log('test');\n}\n\n// bad\ndog.set('attr',{\n  age: '1 year',\n  breed: 'Bernese Mountain Dog',\n});\n\n// good\ndog.set('attr', {\n  age: '1 year',\n  breed: 'Bernese Mountain Dog',\n});\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--around-keywords",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.3"),e("OutboundLink")],1),t._v(" 在控制语句("),e("code",[t._v("if")]),t._v(", "),e("code",[t._v("while")]),t._v(" 等)的圆括号前空一格。在函数调用和定义时，参数列表和函数名之间不空格。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/keyword-spacing.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("keyword-spacing")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nif(isJedi) {\n  fight ();\n}\n\n// good\nif (isJedi) {\n  fight();\n}\n\n// bad\nfunction fight () {\n  console.log ('Swooosh!');\n}\n\n// good\nfunction fight() {\n  console.log('Swooosh!');\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--infix-ops",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.4"),e("OutboundLink")],1),t._v(" 用空格来隔开运算符。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/space-infix-ops.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("space-infix-ops")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst x=y+5;\n\n// good\nconst x = y + 5;\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--newline-at-end",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.5"),e("OutboundLink")],1),t._v(" 文件结尾空一行. eslint: "),e("a",{attrs:{href:"https://github.com/eslint/eslint/blob/master/docs/rules/eol-last.md",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("eol-last")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nimport { es6 } from './AirbnbStyleGuide';\n  // ...\nexport default es6;\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nimport { es6 } from './AirbnbStyleGuide';\n  // ...\nexport default es6;↵\n↵\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// good\nimport { es6 } from './AirbnbStyleGuide';\n  // ...\nexport default es6;↵\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--chains",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.6"),e("OutboundLink")],1),t._v(" 当出现长的方法链（>2个）时用缩进。用点开头强调该行是一个方法调用，而不是一个新的语句。eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/newline-per-chained-call",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("newline-per-chained-call")]),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-whitespace-before-property",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-whitespace-before-property")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\n$('#items').find('.selected').highlight().end().find('.open').updateCount();\n\n// bad\n$('#items').\n  find('.selected').\n    highlight().\n    end().\n  find('.open').\n    updateCount();\n\n// good\n$('#items')\n  .find('.selected')\n    .highlight()\n    .end()\n  .find('.open')\n    .updateCount();\n\n// bad\nconst leds = stage.selectAll('.led').data(data).enter().append('svg:svg').classed('led', true)\n    .attr('width', (radius + margin) * 2).append('svg:g')\n    .attr('transform', `translate(${radius + margin},${radius + margin})`)\n    .call(tron.led);\n\n// good\nconst leds = stage.selectAll('.led')\n    .data(data)\n  .enter().append('svg:svg')\n    .classed('led', true)\n    .attr('width', (radius + margin) * 2)\n  .append('svg:g')\n    .attr('transform', `translate(${radius + margin},${radius + margin})`)\n    .call(tron.led);\n\n// good\nconst leds = stage.selectAll('.led').data(data);\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--after-blocks",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.7"),e("OutboundLink")],1),t._v(" 在一个代码块后下一条语句前空一行。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nif (foo) {\n  return bar;\n}\nreturn baz;\n\n// good\nif (foo) {\n  return bar;\n}\n\nreturn baz;\n\n// bad\nconst obj = {\n  foo() {\n  },\n  bar() {\n  },\n};\nreturn obj;\n\n// good\nconst obj = {\n  foo() {\n  },\n\n  bar() {\n  },\n};\n\nreturn obj;\n\n// bad\nconst arr = [\n  function foo() {\n  },\n  function bar() {\n  },\n];\nreturn arr;\n\n// good\nconst arr = [\n  function foo() {\n  },\n\n  function bar() {\n  },\n];\n\nreturn arr;\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--padded-blocks",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.8"),e("OutboundLink")],1),t._v(" 不要用空白行填充块。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/padded-blocks.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("padded-blocks")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction bar() {\n\n  console.log(foo);\n\n}\n\n// also bad\nif (baz) {\n\n  console.log(qux);\n} else {\n  console.log(foo);\n\n}\n\n// good\nfunction bar() {\n  console.log(foo);\n}\n\n// good\nif (baz) {\n  console.log(qux);\n} else {\n  console.log(foo);\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--no-multiple-blanks",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.9"),e("OutboundLink")],1),t._v("不要在代码之间使用多个空白行填充。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/no-multiple-empty-lines",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-multiple-empty-lines")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nclass Person {\n  constructor(fullName, email, birthday) {\n    this.fullName = fullName;\n\n\n    this.email = email;\n\n\n    this.setAge(birthday);\n  }\n\n\n  setAge(birthday) {\n    const today = new Date();\n\n\n    const age = this.getAge(today, birthday);\n\n\n    this.age = age;\n  }\n\n\n  getAge(today, birthday) {\n    // ..\n  }\n}\n\n// good\nclass Person {\n  constructor(fullName, email, birthday) {\n    this.fullName = fullName;\n    this.email = email;\n    this.setAge(birthday);\n  }\n\n  setAge(birthday) {\n    const today = new Date();\n    const age = getAge(today, birthday);\n    this.age = age;\n  }\n\n  getAge(today, birthday) {\n    // ..\n  }\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--in-parens",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.10"),e("OutboundLink")],1),t._v(" 圆括号里不要加空格。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/space-in-parens.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("space-in-parens")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction bar( foo ) {\n  return foo;\n}\n\n// good\nfunction bar(foo) {\n  return foo;\n}\n\n// bad\nif ( foo ) {\n  console.log(foo);\n}\n\n// good\nif (foo) {\n  console.log(foo);\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--in-brackets",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.11"),e("OutboundLink")],1),t._v(" 方括号里不要加空格。看示例。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/array-bracket-spacing.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("array-bracket-spacing")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst foo = [ 1, 2, 3 ];\nconsole.log(foo[ 0 ]);\n\n// good， 逗号分隔符还是要空格的\nconst foo = [1, 2, 3];\nconsole.log(foo[0]);\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--in-braces",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.12"),e("OutboundLink")],1),t._v(" 花括号里加空格。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/object-curly-spacing.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("object-curly-spacing")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst foo = {clark: 'kent'};\n\n// good\nconst foo = { clark: 'kent' };\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--max-len",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.13"),e("OutboundLink")],1),t._v(" 避免一行代码超过100个字符（包含空格）。")])]),t._v(" "),e("li",[e("p",[t._v("注意： 对于"),e("a",{attrs:{href:"https://github.com/lin-123/javascript#strings--line-length",target:"_blank",rel:"noopener noreferrer"}},[t._v("上面——strings--line-length"),e("OutboundLink")],1),t._v("，长字符串不受此规则限制，不应分解。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/max-len.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("max-len")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 这样确保可读性和可维护性")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst foo = jsonData && jsonData.foo && jsonData.foo.bar && jsonData.foo.bar.baz && jsonData.foo.bar.baz.quux && jsonData.foo.bar.baz.quux.xyzzy;\n\n// bad\n$.ajax({ method: 'POST', url: 'https://airbnb.com/', data: { name: 'John' } }).done(() => console.log('Congratulations!')).fail(() => console.log('You have failed this city.'));\n\n// good\nconst foo = jsonData\n  && jsonData.foo\n  && jsonData.foo.bar\n  && jsonData.foo.bar.baz\n  && jsonData.foo.bar.baz.quux\n  && jsonData.foo.bar.baz.quux.xyzzy;\n\n// good\n$.ajax({\n  method: 'POST',\n  url: 'https://airbnb.com/',\n  data: { name: 'John' },\n})\n  .done(() => console.log('Congratulations!'))\n  .fail(() => console.log('You have failed this city.'));\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--block-spacing",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.14"),e("OutboundLink")],1),t._v(" 作为语句的花括号内也要加空格 —— "),e("code",[t._v("{")]),t._v(" 后和 "),e("code",[t._v("}")]),t._v(" 前都需要空格。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/block-spacing",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("block-spacing")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction foo() {return true;}\nif (foo) { bar = 0;}\n\n// good\nfunction foo() { return true; }\nif (foo) { bar = 0; }\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--comma-spacing",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.15"),e("OutboundLink")],1),t._v(" "),e("code",[t._v(",")]),t._v(" 前不要空格， "),e("code",[t._v(",")]),t._v(" 后需要空格。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/comma-spacing",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("comma-spacing")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nvar foo = 1,bar = 2;\nvar arr = [1 , 2];\n\n// good\nvar foo = 1, bar = 2;\nvar arr = [1, 2];\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--computed-property-spacing",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.16"),e("OutboundLink")],1),t._v(" 计算属性内要空格。参考上述花括号和中括号的规则。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/computed-property-spacing",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("computed-property-spacing")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nobj[foo ]\nobj[ 'foo']\nvar x = {[ b ]: a}\nobj[foo[ bar ]]\n\n// good\nobj[foo]\nobj['foo']\nvar x = { [b]: a }\nobj[foo[bar]]\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--func-call-spacing",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.17"),e("OutboundLink")],1),t._v(" 调用函数时，函数名和小括号之间不要空格。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/func-call-spacing",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("func-call-spacing")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunc ();\n\nfunc\n();\n\n// good\nfunc();\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--key-spacing",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.18"),e("OutboundLink")],1),t._v(" 在对象的字面量属性中， "),e("code",[t._v("key")]),t._v(" "),e("code",[t._v("value")]),t._v(" 之间要有空格。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/key-spacing",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("key-spacing")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// bad\nvar obj = { "foo" : 42 };\nvar obj2 = { "foo":42 };\n\n// good\nvar obj = { "foo": 42 };\n')])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--no-trailing-spaces",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.19"),e("OutboundLink")],1),t._v(" 行末不要空格。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/no-trailing-spaces",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-trailing-spaces")]),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#whitespace--no-multiple-empty-lines",target:"_blank",rel:"noopener noreferrer"}},[t._v("19.20"),e("OutboundLink")],1),t._v(" 避免出现多个空行。 在文件末尾只允许空一行。 eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/no-multiple-empty-lines",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-multiple-empty-lines")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nvar x = 1;\n\n\n\nvar y = 2;\n\n// good\nvar x = 1;\n\nvar y = 2;\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"commas"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commas"}},[t._v("#")]),t._v(" Commas")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#commas--leading-trailing",target:"_blank",rel:"noopener noreferrer"}},[t._v("20.1"),e("OutboundLink")],1),t._v(" 不要前置逗号。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/comma-style.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("comma-style")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst story = [\n    once\n  , upon\n  , aTime\n];\n\n// good\nconst story = [\n  once,\n  upon,\n  aTime,\n];\n\n// bad\nconst hero = {\n    firstName: 'Ada'\n  , lastName: 'Lovelace'\n  , birthYear: 1815\n  , superPower: 'computers'\n};\n\n// good\nconst hero = {\n  firstName: 'Ada',\n  lastName: 'Lovelace',\n  birthYear: 1815,\n  superPower: 'computers',\n};\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#commas--dangling",target:"_blank",rel:"noopener noreferrer"}},[t._v("20.2"),e("OutboundLink")],1),t._v(" 额外结尾逗号: "),e("strong",[t._v("要")]),t._v(" eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/comma-dangle.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("comma-dangle")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 这导致git diffs更清洁。 此外，像Babel这样的转换器会删除转换代码中的额外的逗号，这意味着你不必担心旧版浏览器中的"),e("a",{attrs:{href:"https://github.com/airbnb/javascript/blob/es5-deprecated/es5/README.md#commas",target:"_blank",rel:"noopener noreferrer"}},[t._v("结尾逗号问题"),e("OutboundLink")],1),t._v("。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad - 没有结尾逗号的 git diff\nconst hero = {\n     firstName: 'Florence',\n-    lastName: 'Nightingale'\n+    lastName: 'Nightingale',\n+    inventorOf: ['coxcomb chart', 'modern nursing']\n};\n\n// good - 有结尾逗号的 git diff\nconst hero = {\n     firstName: 'Florence',\n     lastName: 'Nightingale',\n+    inventorOf: ['coxcomb chart', 'modern nursing'],\n};\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst hero = {\n  firstName: 'Dana',\n  lastName: 'Scully'\n};\n\nconst heroes = [\n  'Batman',\n  'Superman'\n];\n\n// good\nconst hero = {\n  firstName: 'Dana',\n  lastName: 'Scully',\n};\n\nconst heroes = [\n  'Batman',\n  'Superman',\n];\n\n// bad\nfunction createHero(\n  firstName,\n  lastName,\n  inventorOf\n) {\n  // does nothing\n}\n\n// good\nfunction createHero(\n  firstName,\n  lastName,\n  inventorOf,\n) {\n  // does nothing\n}\n\n// good (note that a comma must not appear after a \"rest\" element)\nfunction createHero(\n  firstName,\n  lastName,\n  inventorOf,\n  ...heroArgs\n) {\n  // does nothing\n}\n\n// bad\ncreateHero(\n  firstName,\n  lastName,\n  inventorOf\n);\n\n// good\ncreateHero(\n  firstName,\n  lastName,\n  inventorOf,\n);\n\n// good (note that a comma must not appear after a \"rest\" element)\ncreateHero(\n  firstName,\n  lastName,\n  inventorOf,\n  ...heroArgs\n)\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"semicolons"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#semicolons"}},[t._v("#")]),t._v(" Semicolons")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#21.1",target:"_blank",rel:"noopener noreferrer"}},[t._v("21.1"),e("OutboundLink")],1),t._v(" "),e("strong",[t._v("Yup.")]),t._v(" eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/semi.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("semi")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 当 JavaScript 遇到没有分号结尾的一行，它会执行"),e("a",{attrs:{href:"https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion",target:"_blank",rel:"noopener noreferrer"}},[t._v("自动插入分号 "),e("code",[t._v("Automatic Semicolon Insertion")]),e("OutboundLink")],1),t._v("这一规则来决定行末是否加分号。如果JavaScript在你的断行里错误的插入了分号，就会出现一些古怪的行为。当新的功能加到JavaScript里后， 这些规则会变得更复杂难懂。显示的结束语句，并通过配置代码检查去捕获没有带分号的地方可以帮助你防止这种错误。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\n(function () {\n  const name = 'Skywalker'\n  return name\n})()\n\n// good\n(function () {\n  const name = 'Skywalker';\n  return name;\n}());\n\n// good, 行首加分号，避免文件被连接到一起时立即执行函数被当做变量来执行。\n;(() => {\n  const name = 'Skywalker';\n  return name;\n}());\n")])])]),e("p",[e("a",{attrs:{href:"https://stackoverflow.com/questions/7365172/semicolon-before-self-invoking-function/7365214%237365214",target:"_blank",rel:"noopener noreferrer"}},[t._v("Read more"),e("OutboundLink")],1),t._v(".")])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"type-casting-coercion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#type-casting-coercion"}},[t._v("#")]),t._v(" Type Casting & Coercion")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#coercion--explicit",target:"_blank",rel:"noopener noreferrer"}},[t._v("22.1"),e("OutboundLink")],1),t._v(" 在语句开始执行强制类型转换。")])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#coercion--strings",target:"_blank",rel:"noopener noreferrer"}},[t._v("22.2"),e("OutboundLink")],1),t._v(" Strings: eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/no-new-wrappers",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-new-wrappers")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// => this.reviewScore = 9;\n\n// bad\nconst totalScore = new String(this.reviewScore); // typeof totalScore is "object" not "string"\n\n// bad\nconst totalScore = this.reviewScore + \'\'; // invokes this.reviewScore.valueOf()\n\n// bad\nconst totalScore = this.reviewScore.toString(); // 不保证返回string\n\n// good\nconst totalScore = String(this.reviewScore);\n')])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#coercion--numbers",target:"_blank",rel:"noopener noreferrer"}},[t._v("22.3"),e("OutboundLink")],1),t._v(" Numbers: 用 "),e("code",[t._v("Number")]),t._v(" 做类型转换，"),e("code",[t._v("parseInt")]),t._v("转换string常需要带上基数。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/radix",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("radix")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const inputValue = '4';\n\n// bad\nconst val = new Number(inputValue);\n\n// bad\nconst val = +inputValue;\n\n// bad\nconst val = inputValue >> 0;\n\n// bad\nconst val = parseInt(inputValue);\n\n// good\nconst val = Number(inputValue);\n\n// good\nconst val = parseInt(inputValue, 10);\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#coercion--comment-deviations",target:"_blank",rel:"noopener noreferrer"}},[t._v("22.4"),e("OutboundLink")],1),t._v(" 请在注释中解释为什么要用移位运算和你在做什么。无论你做什么狂野的事，比如由于 "),e("code",[t._v("parseInt")]),t._v(" 是你的性能瓶颈导致你一定要用移位运算。 请说明这个是因为"),e("a",{attrs:{href:"https://jsperf.com/coercion-vs-casting/3",target:"_blank",rel:"noopener noreferrer"}},[t._v("性能原因"),e("OutboundLink")],1),t._v(",")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// good\n/**\n * parseInt是代码运行慢的原因\n * 用Bitshifting将字符串转成数字使代码运行效率大幅增长\n */\nconst val = inputValue >> 0;\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#coercion--bitwise",target:"_blank",rel:"noopener noreferrer"}},[t._v("22.5"),e("OutboundLink")],1),t._v(" "),e("strong",[t._v("注意:")]),t._v(" 用移位运算要小心. 数字使用"),e("a",{attrs:{href:"https://es5.github.io/#x4.3.19",target:"_blank",rel:"noopener noreferrer"}},[t._v("64-位"),e("OutboundLink")],1),t._v("表示的，但移位运算常常返回的是32为整形"),e("a",{attrs:{href:"https://es5.github.io/#x11.7",target:"_blank",rel:"noopener noreferrer"}},[t._v("source"),e("OutboundLink")],1),t._v(")。移位运算对大于32位的整数会导致意外行为。"),e("a",{attrs:{href:"https://github.com/airbnb/javascript/issues/109",target:"_blank",rel:"noopener noreferrer"}},[t._v("Discussion"),e("OutboundLink")],1),t._v(". 最大的32位整数是 2,147,483,647:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("2147483647 >> 0 //=> 2147483647\n2147483648 >> 0 //=> -2147483648\n2147483649 >> 0 //=> -2147483647\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#coercion--booleans",target:"_blank",rel:"noopener noreferrer"}},[t._v("22.6"),e("OutboundLink")],1),t._v(" 布尔:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const age = 0;\n\n// bad\nconst hasAge = new Boolean(age);\n\n// good\nconst hasAge = Boolean(age);\n\n// best\nconst hasAge = !!age;\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"naming-conventions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#naming-conventions"}},[t._v("#")]),t._v(" Naming Conventions")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#naming--descriptive",target:"_blank",rel:"noopener noreferrer"}},[t._v("23.1"),e("OutboundLink")],1),t._v(" 避免用一个字母命名，让你的命名可描述。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/id-length",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("id-length")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction q() {\n  // ...\n}\n\n// good\nfunction query() {\n  // ...\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#naming--camelCase",target:"_blank",rel:"noopener noreferrer"}},[t._v("23.2"),e("OutboundLink")],1),t._v(" 用小驼峰式命名你的对象、函数、实例。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/camelcase.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("camelcase")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst OBJEcttsssss = {};\nconst this_is_my_object = {};\nfunction c() {}\n\n// good\nconst thisIsMyObject = {};\nfunction thisIsMyFunction() {}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#naming--PascalCase",target:"_blank",rel:"noopener noreferrer"}},[t._v("23.3"),e("OutboundLink")],1),t._v(" 用大驼峰式命名类。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/new-cap.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("new-cap")]),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction user(options) {\n  this.name = options.name;\n}\n\nconst bad = new user({\n  name: 'nope',\n});\n\n// good\nclass User {\n  constructor(options) {\n    this.name = options.name;\n  }\n}\n\nconst good = new User({\n  name: 'yup',\n});\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#naming--leading-underscore",target:"_blank",rel:"noopener noreferrer"}},[t._v("23.4"),e("OutboundLink")],1),t._v(" 不要用前置或后置下划线。 eslint: "),e("a",{attrs:{href:"http://eslint.org/docs/rules/no-underscore-dangle.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-underscore-dangle")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? JavaScript 没有私有属性或私有方法的概念。尽管前置下划线通常的概念上意味着“private”，事实上，这些属性是完全公有的，因此这部分也是你的API的内容。这一概念可能会导致开发者误以为更改这个不会导致崩溃或者不需要测试。 如果你想要什么东西变成“private”，那就不要让它在这里出现。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nthis.__firstName__ = 'Panda';\nthis.firstName_ = 'Panda';\nthis._firstName = 'Panda';\n\n// good\nthis.firstName = 'Panda';\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#naming--self-this",target:"_blank",rel:"noopener noreferrer"}},[t._v("23.5"),e("OutboundLink")],1),t._v(" 不要保存引用"),e("code",[t._v("this")]),t._v("， 用箭头函数或"),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind",target:"_blank",rel:"noopener noreferrer"}},[t._v("函数绑定——Function#bind"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction foo() {\n  const self = this;\n  return function () {\n    console.log(self);\n  };\n}\n\n// bad\nfunction foo() {\n  const that = this;\n  return function () {\n    console.log(that);\n  };\n}\n\n// good\nfunction foo() {\n  return () => {\n    console.log(this);\n  };\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#naming--filename-matches-export",target:"_blank",rel:"noopener noreferrer"}},[t._v("23.6"),e("OutboundLink")],1),t._v(" export default导出模块A，则这个文件名也叫A.*， import 时候的参数也叫A。 大小写完全一致。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// file 1 contents\nclass CheckBox {\n  // ...\n}\nexport default CheckBox;\n\n// file 2 contents\nexport default function fortyTwo() { return 42; }\n\n// file 3 contents\nexport default function insideDirectory() {}\n\n// in some other file\n// bad\nimport CheckBox from './checkBox'; // PascalCase import/export, camelCase filename\nimport FortyTwo from './FortyTwo'; // PascalCase import/filename, camelCase export\nimport InsideDirectory from './InsideDirectory'; // PascalCase import/filename, camelCase export\n\n// bad\nimport CheckBox from './check_box'; // PascalCase import/export, snake_case filename\nimport forty_two from './forty_two'; // snake_case import/filename, camelCase export\nimport inside_directory from './inside_directory'; // snake_case import, camelCase export\nimport index from './inside_directory/index'; // requiring the index file explicitly\nimport insideDirectory from './insideDirectory/index'; // requiring the index file explicitly\n\n// good\nimport CheckBox from './CheckBox'; // PascalCase export/import/filename\nimport fortyTwo from './fortyTwo'; // camelCase export/import/filename\nimport insideDirectory from './insideDirectory'; // camelCase export/import/directory name/implicit \"index\"\n// ^ supports both insideDirectory.js and insideDirectory/index.js\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#naming--camelCase-default-export",target:"_blank",rel:"noopener noreferrer"}},[t._v("23.7"),e("OutboundLink")],1),t._v(" 当你export-default一个函数时，函数名用小驼峰，文件名需要和函数名一致。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function makeStyleGuide() {\n  // ...\n}\n\nexport default makeStyleGuide;\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#naming--PascalCase-singleton",target:"_blank",rel:"noopener noreferrer"}},[t._v("23.8"),e("OutboundLink")],1),t._v(" 当你export一个结构体/类/单例/函数库/对象 时用大驼峰。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const AirbnbStyleGuide = {\n  es6: {\n  }\n};\n\nexport default AirbnbStyleGuide;\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#naming--Acronyms-and-Initialisms",target:"_blank",rel:"noopener noreferrer"}},[t._v("23.9"),e("OutboundLink")],1),t._v(" 简称和缩写应该全部大写或全部小写。")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 名字都是给人读的，不是为了适应电脑的算法的。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nimport SmsContainer from './containers/SmsContainer';\n\n// bad\nconst HttpRequests = [\n  // ...\n];\n\n// good\nimport SMSContainer from './containers/SMSContainer';\n\n// good\nconst HTTPRequests = [\n  // ...\n];\n\n// also good\nconst httpRequests = [\n  // ...\n];\n\n// best\nimport TextMessageContainer from './containers/TextMessageContainer';\n\n// best\nconst requests = [\n  // ...\n];\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#naming--uppercase",target:"_blank",rel:"noopener noreferrer"}},[t._v("23.10"),e("OutboundLink")],1),t._v(" 你可以用全大写字母设置静态变量，他需要满足三个条件。")]),t._v(" "),e("ol",[e("li",[t._v("导出变量")]),t._v(" "),e("li",[t._v("是 "),e("code",[t._v("const")]),t._v(" 定义的， 保证不能被改变")]),t._v(" "),e("li",[t._v("这个变量是可信的，他的子属性都是不能被改变的")])]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 这是一个附加工具，帮助开发者去辨识一个变量是不是不可变的。")])]),t._v(" "),e("ul",[e("li",[t._v("对于所有的 "),e("code",[t._v("const")]),t._v(" 变量呢？ —— 这个是不必要的。大写变量不应该在同一个文件里定义并使用， 它只能用来作为导出变量。 赞同！")]),t._v(" "),e("li",[t._v("那导出的对象呢？ —— 大写变量处在export的最高级(e.g. "),e("code",[t._v("EXPORTED_OBJECT.key")]),t._v(") 并且他包含的所有子属性都是不可变的。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst PRIVATE_VARIABLE = 'should not be unnecessarily uppercased within a file';\n\n// bad\nexport const THING_TO_BE_CHANGED = 'should obviously not be uppercased';\n\n// bad\nexport let REASSIGNABLE_VARIABLE = 'do not use let with uppercase variables';\n\n// ---\n\n// 允许但不够语义化\nexport const apiKey = 'SOMEKEY';\n\n// 在大多数情况下更好\nexport const API_KEY = 'SOMEKEY';\n\n// ---\n\n// bad - 不必要的大写键，没有增加任何语言\nexport const MAPPING = {\n  KEY: 'value'\n};\n\n// good\nexport const MAPPING = {\n  key: 'value'\n};\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"accessors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#accessors"}},[t._v("#")]),t._v(" Accessors")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#accessors--not-required",target:"_blank",rel:"noopener noreferrer"}},[t._v("24.1"),e("OutboundLink")],1),t._v(" 不需要使用属性的访问器函数。")])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#accessors--no-getters-setters",target:"_blank",rel:"noopener noreferrer"}},[t._v("24.2"),e("OutboundLink")],1),t._v(" 不要使用JavaScript的getters/setters，因为他们会产生副作用，并且难以测试、维护和理解。相反的，你可以用 getVal()和setVal('hello')去创造你自己的accessor函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nclass Dragon {\n  get age() {\n    // ...\n  }\n\n  set age(value) {\n    // ...\n  }\n}\n\n// good\nclass Dragon {\n  getAge() {\n    // ...\n  }\n\n  setAge(value) {\n    // ...\n  }\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#accessors--boolean-prefix",target:"_blank",rel:"noopener noreferrer"}},[t._v("24.3"),e("OutboundLink")],1),t._v(" 如果属性/方法是"),e("code",[t._v("boolean")]),t._v("， 用 "),e("code",[t._v("isVal()")]),t._v(" 或 "),e("code",[t._v("hasVal()")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nif (!dragon.age()) {\n  return false;\n}\n\n// good\nif (!dragon.hasAge()) {\n  return false;\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#accessors--consistent",target:"_blank",rel:"noopener noreferrer"}},[t._v("24.4"),e("OutboundLink")],1),t._v(" 用get()和set()函数是可以的，但是要一起用")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Jedi {\n  constructor(options = {}) {\n    const lightsaber = options.lightsaber || 'blue';\n    this.set('lightsaber', lightsaber);\n  }\n\n  set(key, val) {\n    this[key] = val;\n  }\n\n  get(key) {\n    return this[key];\n  }\n}\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"events"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[t._v("#")]),t._v(" Events")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#events--hash",target:"_blank",rel:"noopener noreferrer"}},[t._v("25.1"),e("OutboundLink")],1),t._v(" 通过哈希而不是原始值向事件装载数据时(不论是DOM事件还是像Backbone事件的很多属性)。 这使得后续的贡献者（程序员）向这个事件装载更多的数据时不用去找或者更新每个处理器。例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\n$(this).trigger('listingUpdated', listing.id);\n\n// ...\n\n$(this).on('listingUpdated', (e, listingID) => {\n  // do something with listingID\n});\n")])])]),e("p",[t._v("prefer:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// good\n$(this).trigger('listingUpdated', { listingID: listing.id });\n\n// ...\n\n$(this).on('listingUpdated', (e, data) => {\n  // do something with data.listingID\n});\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"jquery"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jquery"}},[t._v("#")]),t._v(" jQuery")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#jquery--dollar-prefix",target:"_blank",rel:"noopener noreferrer"}},[t._v("26.1"),e("OutboundLink")],1),t._v(" jQuery对象用"),e("code",[t._v("$")]),t._v("变量表示。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nconst sidebar = $('.sidebar');\n\n// good\nconst $sidebar = $('.sidebar');\n\n// good\nconst $sidebarBtn = $('.sidebar-btn');\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#jquery--cache",target:"_blank",rel:"noopener noreferrer"}},[t._v("26.2"),e("OutboundLink")],1),t._v(" 暂存jQuery查找")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nfunction setSidebar() {\n  $('.sidebar').hide();\n\n  // ...\n\n  $('.sidebar').css({\n    'background-color': 'pink'\n  });\n}\n\n// good\nfunction setSidebar() {\n  const $sidebar = $('.sidebar');\n  $sidebar.hide();\n\n  // ...\n\n  $sidebar.css({\n    'background-color': 'pink'\n  });\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#jquery--queries",target:"_blank",rel:"noopener noreferrer"}},[t._v("26.3"),e("OutboundLink")],1),t._v(" DOM查找用层叠式"),e("code",[t._v("$('.sidebar ul')")]),t._v(" 或 父节点 > 子节点 "),e("code",[t._v("$('.sidebar > ul')")]),t._v(". "),e("a",{attrs:{href:"http://jsperf.com/jquery-find-vs-context-sel/16",target:"_blank",rel:"noopener noreferrer"}},[t._v("jsPerf"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#jquery--find",target:"_blank",rel:"noopener noreferrer"}},[t._v("26.4"),e("OutboundLink")],1),t._v(" 用jQuery对象查询作用域的"),e("code",[t._v("find")]),t._v("方法查询")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\n$('ul', '.sidebar').hide();\n\n// bad\n$('.sidebar').find('ul').hide();\n\n// good\n$('.sidebar ul').hide();\n\n// good\n$('.sidebar > ul').hide();\n\n// good\n$sidebar.find('ul').hide();\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"es5-兼容性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es5-兼容性"}},[t._v("#")]),t._v(" ES5 兼容性")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#es5-compat--kangax",target:"_blank",rel:"noopener noreferrer"}},[t._v("27.1"),e("OutboundLink")],1),t._v(" 参考"),e("a",{attrs:{href:"https://twitter.com/kangax/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kangax"),e("OutboundLink")],1),t._v("的ES5"),e("a",{attrs:{href:"https://kangax.github.io/es5-compat-table/",target:"_blank",rel:"noopener noreferrer"}},[t._v("兼容性列表"),e("OutboundLink")],1),t._v(".")])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"ecmascript-6-es-2015-styles"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-6-es-2015-styles"}},[t._v("#")]),t._v(" ECMAScript 6+ (ES 2015+) Styles")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#es6-styles",target:"_blank",rel:"noopener noreferrer"}},[t._v("28.1"),e("OutboundLink")],1),t._v(" 这是收集到的各种ES6特性的链接")])]),t._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#arrow-functions",target:"_blank",rel:"noopener noreferrer"}},[t._v("箭头函数——Arrow Functions"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#classes--constructors",target:"_blank",rel:"noopener noreferrer"}},[t._v("类——Classes"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#es6-object-shorthand",target:"_blank",rel:"noopener noreferrer"}},[t._v("对象缩写——Object Shorthand"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#es6-object-concise",target:"_blank",rel:"noopener noreferrer"}},[t._v("对象简写——Object Concise"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#es6-computed-properties",target:"_blank",rel:"noopener noreferrer"}},[t._v("对象计算属性——Object Computed Properties"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#es6-template-literals",target:"_blank",rel:"noopener noreferrer"}},[t._v("模板字符串——Template Strings"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#destructuring",target:"_blank",rel:"noopener noreferrer"}},[t._v("解构赋值——Destructuring"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#es6-default-parameters",target:"_blank",rel:"noopener noreferrer"}},[t._v("默认参数——Default Parameters"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#es6-rest",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rest"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#es6-array-spreads",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array Spreads"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#references",target:"_blank",rel:"noopener noreferrer"}},[t._v("Let and Const"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#es2016-properties--exponentiation-operator",target:"_blank",rel:"noopener noreferrer"}},[t._v("幂操作符——Exponentiation Operator"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#iterators-and-generators",target:"_blank",rel:"noopener noreferrer"}},[t._v("迭代器和生成器——Iterators and Generators"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#modules",target:"_blank",rel:"noopener noreferrer"}},[t._v("模块——Modules"),e("OutboundLink")],1)])]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#tc39-proposals",target:"_blank",rel:"noopener noreferrer"}},[t._v("28.2"),e("OutboundLink")],1),t._v(" 不要用"),e("a",{attrs:{href:"https://github.com/tc39/proposals",target:"_blank",rel:"noopener noreferrer"}},[t._v("TC39 proposals"),e("OutboundLink")],1),t._v("， TC39还没有到 stage 3。")]),t._v(" "),e("blockquote",[e("p",[t._v("Why? "),e("a",{attrs:{href:"https://tc39.github.io/process-document/",target:"_blank",rel:"noopener noreferrer"}},[t._v("它还不是最终版"),e("OutboundLink")],1),t._v(", 他可能还有很多变化，或者被撤销。 我们想要用的是 JavaScript， 提议还不是JavaScript。")])])])]),t._v(" "),e("p",[e("strong",[t._v("⬆ back to top")])]),t._v(" "),e("h2",{attrs:{id:"standard-library"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#standard-library"}},[t._v("#")]),t._v(" Standard Library")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects",target:"_blank",rel:"noopener noreferrer"}},[t._v("标准库"),e("OutboundLink")],1),t._v("中包含一些功能受损但是由于历史原因遗留的工具类")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#standard-library--isnan",target:"_blank",rel:"noopener noreferrer"}},[t._v("29.1"),e("OutboundLink")],1),t._v(" 用 "),e("code",[t._v("Number.isNaN")]),t._v(" 代替全局的 "),e("code",[t._v("isNaN")]),t._v(". eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/no-restricted-globals",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-restricted-globals")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 全局 "),e("code",[t._v("isNaN")]),t._v(" 强制把非数字转成数字， 然后对于任何强转后为 "),e("code",[t._v("NaN")]),t._v(" 的变量都返回 "),e("code",[t._v("true")]),t._v(" 如果你想用这个功能，就显式的用它。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nisNaN('1.2'); // false\nisNaN('1.2.3'); // true\n\n// good\nNumber.isNaN('1.2.3'); // false\nNumber.isNaN(Number('1.2.3')); // true\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#standard-library--isfinite",target:"_blank",rel:"noopener noreferrer"}},[t._v("29.2"),e("OutboundLink")],1),t._v(" 用 "),e("code",[t._v("Number.isFinite")]),t._v(" 代替 "),e("code",[t._v("isFinite")]),t._v(". eslint: "),e("a",{attrs:{href:"https://eslint.org/docs/rules/no-restricted-globals",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("no-restricted-globals")]),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Why? 理由同上，会把一个非数字变量强转成数字，然后做判断。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// bad\nisFinite('2e3'); // true\n\n// good\nNumber.isFinite('2e3'); // false\nNumber.isFinite(parseInt('2e3', 10)); // true\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"testing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#testing"}},[t._v("#")]),t._v(" Testing")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#testing--yup",target:"_blank",rel:"noopener noreferrer"}},[t._v("30.1"),e("OutboundLink")],1),t._v(" "),e("strong",[t._v("Yup.")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function foo() {\n  return true;\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lin-123/javascript#testing--for-real",target:"_blank",rel:"noopener noreferrer"}},[t._v("30.2"),e("OutboundLink")],1),t._v(" "),e("strong",[t._v("No, but seriously")]),t._v(":")])]),t._v(" "),e("li",[e("p",[t._v("无论用那个测试框架，你都需要写测试。")])]),t._v(" "),e("li",[e("p",[t._v("尽量去写很多小而美的纯函数，减少突变的发生")])]),t._v(" "),e("li",[e("p",[t._v("小心 stub 和 mock —— 这会让你的测试变得脆弱。")])]),t._v(" "),e("li",[e("p",[t._v("在 Airbnb 首选 "),e("a",{attrs:{href:"https://www.npmjs.com/package/mocha",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("mocha")]),e("OutboundLink")],1),t._v("。 "),e("a",{attrs:{href:"https://www.npmjs.com/package/tape",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("tape")]),e("OutboundLink")],1),t._v(" 偶尔被用来测试一些小的，独立的模块。")])]),t._v(" "),e("li",[e("p",[t._v("100%测试覆盖率是我们努力的目标，即便实际上很少达到。")])]),t._v(" "),e("li",[e("p",[t._v("每当你修了一个bug， 都要写一个回归测试。 一个bug修复了，没有回归测试，很可能以后会再次出问题。")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);